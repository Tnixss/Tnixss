import os  
import base64
import colorama
mhm = "aW1wb3J0IHRpbWUKZnJvbSBjb2xvcmFtYSBpbXBvcnQgRm9yZSwgU3R5bGUKZnJvbSB0aW1lIGltcG9ydCBzbGVlcApmcm9tIG9zIGltcG9ydCBzeXN0ZW0KZnJvbSByZXF1ZXN0cyBpbXBvcnQgZ2V0CmltcG9ydCBiYXNlNjQKaW1wb3J0IHBsYXRmb3JtCmltcG9ydCB1cmxsaWIzCmltcG9ydCBiYXNlNjQK"
mhmnew = base64.b64decode(mhm)
exec(mhmnew)
time.sleep(1)
UserProccessor = platform.processor()
##USERS##
Admin=['V0RzZURSRjhRVw==', 'SW50ZWw2NCBGYW1pbHkgNiBNb2RlbCA1OCBTdGVwcGluZyA5LCBHZW51aW5lSW50ZWw=']
Ahmet=['UWVzRkRxU0Y=', 'SW50ZWwgQ29yZSBpOQ==']
Halil=['R3NlRkVjRTU=','QU1EIFJ5emVuIDk=']
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
r = get(
    "https://raw.githubusercontent.com/Tnixss/Tnixss/main/pybomb.py").text

toolupdatecode = get("https://raw.githubusercontent.com/Tnixss/Tnixss/main/tool.py").text
toolupt = base64.b64decode(toolupdatecode)
with open("smsbomber.py", "r", encoding='utf-8') as t:
    readt = t.read()
if readt == toolupt:
    pass
else:
     print(Fore.RED + "Güncelleme yapılıyor...")
     with open("smsbomber.py", "w", encoding='utf-8') as t:
        decodecode = base64.b64decode(t).decode('utf-8')
        t.write(decodecode)
####### DATABASE #######

####### PER USER #######
passwords = Admin[0]
proccesor = Admin[1]
decryptedproccesor = base64.b64decode(proccesor)
decryptedpass = base64.b64decode(passwords)
decodedproccesor = decryptedproccesor.decode('utf-8')
decodedpass = decryptedpass.decode('utf-8')
passproccesor = decodedproccesor
password = decodedpass
# -----------------------------------------------------------#
####### PER USER #######
passwords = Ahmet[0]
proccesor = Ahmet[1]
decryptedproccesor = base64.b64decode(proccesor)
decryptedpass = base64.b64decode(passwords)
decodedproccesor = decryptedproccesor.decode('utf-8')
decodedpass1 = decryptedpass.decode('utf-8')
passproccesor1 = decodedproccesor
password = decodedpass1
# -----------------------------------------------------------#
####### PER USER #######
passwords = Halil[0]
proccesor = Halil[1]
decryptedproccesor = base64.b64decode(proccesor)
decryptedpass = base64.b64decode(passwords)
decodedproccesor = decryptedproccesor.decode('utf-8')
decodedpass2 = decryptedpass.decode('utf-8')
passproccesor2 = decodedproccesor
password = decodedpass2
# -----------------------------------------------------------#
print(platform.processor())
print()
##with open('setup.py', 'w+', encoding='utf-8') as fra:
##    fradecrypt = base64.b64decode(fr).decode('utf-8')
##    fra.write(fradecrypt)
##   exec(fra)
time.sleep(2)

with open("sms.py", "r", encoding="utf-8") as f:
    read = f.read()
if read == r:
    
    pass
else:
    print(Fore.RED + "Güncelleme yapılıyor...")
    with open("sms.py", "w", encoding="utf-8") as f:
        f.write(r)
from sms import SendSms
Pass = input("Şifrenizi Girin= ")
if Pass == decodedpass or decodedpass1 or decodedpass2:
    if UserProccessor == passproccesor:
        pass
    elif UserProccessor == passproccesor1:
        pass
    elif UserProccessor == passproccesor2:
        pass
    else:
        print("Bu Key'i Kullanamazsın! Satın alman gerekyior! https://discord.gg/VhkguswDJh")
        quit(550)

    servisler_sms = []

    for attribute in dir(SendSms):
        attribute_value = getattr(SendSms, attribute)
        if callable(attribute_value):
            if attribute.startswith('__') == False:
                servisler_sms.append(attribute)

    while True:
        system("cls||clear")
        print("""{}

        SMS_API: {}  | LightArmy Team | Geliştirilmiş sürümüdür.                                    
        """.format(Fore.LIGHTRED_EX, len(servisler_sms), Style.RESET_ALL,
                   Fore.CYAN))
        print(Fore.LIGHTGREEN_EX + "{/} " + Style.RESET_ALL + "Made by " +
              Fore.LIGHTGREEN_EX + Style.BRIGHT + "NiqhtBo1\n" + Style.RESET_ALL)
        try:
            menu = int(
                input(Fore.LIGHTMAGENTA_EX +
                      " 1- SMS Gönder\n 2- İletişim\n 3- Çıkış\n\n" +
                      Fore.LIGHTYELLOW_EX + " Seçim: "))
        except ValueError:
            system("cls||clear")
            print(Fore.LIGHTRED_EX + "Hatalı giriş yaptınız. Tekrar deneyiniz.")
            sleep(3)
            continue

        if menu == 1:
            system("cls||clear")
            try:
                print(
                    Fore.LIGHTYELLOW_EX +
                    "Telefon numarasını başında '+90' olmadan yazınız (birden çoksa 'enter' bas): "
                    + Fore.LIGHTGREEN_EX,
                    end="")
                tel_no = input()
                if tel_no != "" and len(str(tel_no)) == 10:
                    tel_no2 = "bos"
                    tel_no3 = "bos"
                    tel_no4 = "bos"
                    tel_no5 = "bos"
                if tel_no == "":
                    system("cls||clear")
                    print(
                        Fore.LIGHTGREEN_EX + "[+] " + Fore.CYAN + "TXT dosya formatı:\n" +
                        Fore.LIGHTGREEN_EX + "[+] " + Fore.CYAN +
                        "En fazla 5 numara olacak şekilde başında '+90' olmadan alt alta numaraları yazın."
                    )
                    print("")
                    print("")
                    print(Fore.LIGHTYELLOW_EX + "TXT dosyasının yolunu giriniz: " +
                          Fore.LIGHTGREEN_EX,
                          end="")
                    dosya_yolu = input()
                    try:
                        with open(dosya_yolu, 'r') as file:
                            tel_list = file.readlines()
                            for i, number in enumerate(tel_list):
                                if i == 0:
                                    tel_no = number.strip()
                                elif i == 1:
                                    tel_no2 = number.strip()
                                elif i == 2:
                                    tel_no3 = number.strip()
                                elif i == 3:
                                    tel_no4 = number.strip()
                                elif i == 4:
                                    tel_no5 = number.strip()
                                if len(number.strip()) != 10:
                                    raise ValueError
                            if i < 4:
                                for j in range(i + 1, 5):
                                    if j == 1:
                                        tel_no2 = "bos"
                                    elif j == 2:
                                        tel_no3 = "bos"
                                    elif j == 3:
                                        tel_no4 = "bos"
                                    elif j == 4:
                                        tel_no5 = "bos"
                    except FileNotFoundError:
                        system("cls||clear")
                        print(Fore.LIGHTRED_EX + "Dosya bulunamadı. Tekrar deneyiniz.")
                        sleep(3)
                        continue
                    except ValueError:
                        system("cls||clear")
                        print(Fore.LIGHTRED_EX +
                              "Hatalı telefon numarası. Tekrar deneyiniz.")
                        sleep(3)
                        continue
                else:
                    if len(tel_no) != 10:
                        raise ValueError
            except ValueError:
                system("cls||clear")
                print(Fore.LIGHTRED_EX + "Hatalı telefon numarası. Tekrar deneyiniz.")
                sleep(3)
                continue
            system("cls||clear")
            try:
                print(Fore.LIGHTYELLOW_EX +
                      "Mail adresi (Bilmiyorsanız 'enter' tuşuna basın): " +
                      Fore.LIGHTGREEN_EX,
                      end="")
                mail = input()
                if ("@" not in mail or ".com" not in mail) and mail != "":
                    raise
            except:
                system("cls||clear")
                print(Fore.LIGHTRED_EX + "Hatalı mail adresi. Tekrar deneyiniz.")
                sleep(3)
                continue
            system("cls||clear")
            try:
                print(Fore.LIGHTGREEN_EX + "[+] " + Fore.CYAN +
                      "Birden çok numara varsa her bir numara için.")
                print(Fore.LIGHTYELLOW_EX +
                      "Kaç adet SMS göndermek istiyorsun (sonsuz ise 'enter' bas): " +
                      Fore.LIGHTGREEN_EX,
                      end="")
                kere = input()
                if kere:
                    kere = int(kere)
                else:
                    kere = None
            except ValueError:
                system("cls||clear")
                print(Fore.LIGHTRED_EX + "Hatalı giriş yaptınız. Tekrar deneyiniz.")
                sleep(3)
                continue

            system("cls||clear")
            try:
                print(Fore.LIGHTYELLOW_EX +
                      "Kaç saniye aralıkla göndermek istiyorsun: " + Fore.LIGHTGREEN_EX,
                      end="")
                aralik = int(input())
            except ValueError:
                system("cls||clear")
                print(Fore.LIGHTRED_EX + "Hatalı giriş yaptınız. Tekrar deneyiniz.")
                sleep(3)
                continue
            system("cls||clear")
            if kere is not None:
                tel_numbers = [tel_no, tel_no2, tel_no3, tel_no4, tel_no5]
                bos_olmayan = len([x for x in tel_numbers if x != "bos"])
                keree = kere * bos_olmayan
            sms = SendSms(tel_no, mail)
            if isinstance(kere, int):
                while sms.adet < kere:
                    for attribute in dir(SendSms):
                        attribute_value = getattr(SendSms, attribute)
                        if callable(attribute_value):
                            if attribute.startswith('__') == False:
                                if sms.adet == keree or sms.adet > keree:
                                    break
                                exec("sms." + attribute + "()")
                                sleep(aralik)
                print(Fore.LIGHTRED_EX + "\nMenüye dönmek için 'enter' tuşuna basınız..")
                input()
            elif kere is None:
                while True:
                    for attribute in dir(SendSms):
                        attribute_value = getattr(SendSms, attribute)
                        if callable(attribute_value):
                            if attribute.startswith('__') == False:
                                exec("sms." + attribute + "()")
                                sleep(aralik)
            pass
        elif menu == 2:
            system("cls||clear")
            print(Fore.LIGHTYELLOW_EX + "İletişim bilgileri:\n\n" +
                  Fore.LIGHTGREEN_EX +
                  "Mevcut Değil\n")

            print(Fore.LIGHTGREEN_EX + "{/} " + Style.RESET_ALL + "Made by " +
                  Fore.LIGHTMAGENTA_EX + Style.BRIGHT + "NiqhtBo1\n" +
                  Style.RESET_ALL)
            print(Fore.LIGHTRED_EX + "Menüye dönmek için 'enter' tuşuna basınız..")
            input()
        elif menu == 3:
            system("cls||clear")
            print(Fore.LIGHTRED_EX + "Çıkış yapılıyor...")
            break
else:
    print("Şifre Yanlış")
